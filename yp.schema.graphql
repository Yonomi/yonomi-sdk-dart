type Health {
  ok: Boolean!
}

type Query {
  health: Health!

  # The currently logged in user. This is the primary entry point into a user's data graph
  me: User!
  integrations(
    # Limit the paged response to a max number of items.
    first: Int = 10

    # Used to indicated where in the result set the paged response should start.
    after: String
  ): IntegrationConnection!

  # The currently logged in user's tenant.
  tenant: Tenant!

  # Query for a specific device.
  device(
    # The id of a specific device.
    id: ID!
  ): Device

  # (MOCK INTEGRATION): fetch all recent requests that have hit the the mock connector for a specific integration ID.
  MOCK_CONNECTOR_getRequests(
    # The id of the mock integration.
    integrationId: ID!

    # Time period filters to constraint request results to.
    filter: MockConnectorRequestsFilters
  ): [JSON!]!

  # (MOCK INTEGRATION): get all connector access tokens granted to an integration
  MOCK_CONNECTOR_getAllConnectorAccessTokens(
    # The id of the mock integration.
    integrationId: ID!
  ): [String!]
}

# The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
scalar JSON

input MockConnectorRequestsFilters {
  # Filtering during a certain time period. Time period can be narrowed as needed based on ISO 8601 timestamp e.g. 2020 || 2020-12 || 2020-12-08
  timePeriod: String

  # filtering after a certain time period
  beforeTimePeriod: String

  # filtering before a certain time period
  afterTimePeriod: String
}

type Mutation {
  # Update the display name of the currently logged in user.
  updateUserDisplayName(
    # The new display name. If not provided, display name will be cleared.
    displayName: String
  ): User!

  # Generate an account linking URL for a specific integration.
  generateAccountLinkingUrl(
    # The id of the integration
    integrationId: ID!
  ): GeneratedAccountLinkingUrl!

  # Remove a linked account
  removeLinkedAccount(
    # The id of the linked account
    linkedAccountId: ID!
  ): RemoveLinkedAccountResponse!

  # Set the absolute brightness of this device.
  actionBrightnessSetBrightnessPercentage(
    # The target device's id
    deviceId: ID!

    # The identifier for the specific trait instance this action is targeting.
    traitInstance: String! = "default"

    # The new absolute brightness value.
    brightness: Int!
  ): CreateActionResponse!

  # Set the relative brightness value of this device.
  actionBrightnessSetRelativeBrightness(
    # The target device's id
    deviceId: ID!

    # The identifier for the specific trait instance this action is targeting.
    traitInstance: String! = "default"

    # The new relative brightness value.
    brightness: Int!
  ): CreateActionResponse!

  # Lock (true) or unlock (false) the device.
  actionLockUnlockLockUnlock(
    # The target device's id
    deviceId: ID!

    # The identifier for the specific trait instance this action is targeting.
    traitInstance: String! = "default"

    # True to lock, false to unlock.
    lock: Boolean!
  ): CreateActionResponse!

  # Whether to turn the device on or off. Should update to reflect argument is only a boolean.
  actionPowerOnOff(
    # The target device's id
    deviceId: ID!

    # The identifier for the specific trait instance this action is targeting.
    traitInstance: String! = "default"

    # Whether to turn the device on (true) or off (false).
    on: Boolean!
  ): CreateActionResponse!

  # Toggle power on/off.
  actionPowerToggle(
    # The target device's id
    deviceId: ID!

    # The identifier for the specific trait instance this action is targeting.
    traitInstance: String! = "default"
  ): CreateActionResponse!

  # Set the mode of the device.
  actionThermostatSettingSetMode(
    # The target device's id
    deviceId: ID!

    # The identifier for the specific trait instance this action is targeting.
    traitInstance: String! = "default"

    # The mode to set the device to.
    mode: ThermostatMode!
  ): CreateActionResponse!

  # Set the target temperature of the device for the associated mode.
  actionThermostatSettingSetTargetTemperature(
    # The target device's id
    deviceId: ID!

    # The identifier for the specific trait instance this action is targeting.
    traitInstance: String! = "default"

    # The temperature to set the device to in Celsius.
    targetTemperature: Float!
  ): CreateActionResponse!

  # Set the fan mode of the device.
  actionThermostatSettingSetFanMode(
    # The target device's id
    deviceId: ID!

    # The identifier for the specific trait instance this action is targeting.
    traitInstance: String! = "default"

    # The fan mode to set the device to.
    fanMode: FanMode!
  ): CreateActionResponse!

  # Set a temperature range for the device to sit between.
  actionThermostatSettingSetTargetTemperatureRange(
    # The target device's id
    deviceId: ID!

    # The identifier for the specific trait instance this action is targeting.
    traitInstance: String! = "default"

    # The low temperature to set the device to in Celsius.
    setPointLow: Float!

    # The high temperature to set the device to in Celsius.
    setPointHigh: Float!
  ): CreateActionResponse!

  # (MOCK INTEGRATION): Install a discovery payload in the mock integration, the integration will respond to the platform with this payload once.
  MOCK_CONNECTOR_installDiscoveryPayload(
    # The id of the mock integration.
    integrationId: ID!

    # The list of devices
    deviceManifest: [JSONObject]!
    customAccountData: JSONObject
  ): Boolean!

  # (MOCK INTEGRATION): Report state
  MOCK_CONNECTOR_reportState(
    # The id of the mock integration
    integrationId: ID!

    # The physical ID of the device
    physicalId: ID!

    # Connector access token
    connectorAccessToken: String!

    # The trait being updated.
    traitName: TraitName!

    # The specific trait instance being updated.
    traitInstance: String! = "default"

    # The state field being updated
    fieldName: String!

    # The reported value
    value: JSON!

    # The date to report this state being sampeld at.
    sampledAt: DateTime
  ): JSON!

  # (VIRTUAL CONNECTOR): simulate discovery for a virtual connector
  VIRTUAL_CONNECTOR_discover(
    # The (arbitrary) value to use as the Linked Account ID. This is only used for permissions.
    linkedAccountId: ID!

    # Number of new locks to discover (LOCK trait)
    locks: Int! = 0

    # Number of new switches to discover (POWER trait)
    switches: Int! = 0

    # Number of lights to discover (POWER and BRIGHTNESS traits)
    lights: Int! = 0

    # Number of thermostats to discover (THERMOSTATSETTING trait)
    thermostats: Int! = 0
  ): [Device!]!

  # (VIRTUAL CONNECTOR): simulate reporting state for a device
  VIRTUAL_CONNECTOR_reportState(
    # The value to use as the Linked Account ID. This is only used for permissions.
    linkedAccountId: ID!

    # The device ID that should be updated.
    deviceId: ID!

    # The trait being updated.
    traitName: TraitName!

    # The specific trait instance being updated.
    traitInstance: String! = "default"

    # The state field being updated
    fieldName: String!

    # The date to report this state being sampeld at.
    sampledAt: DateTime

    # The reported value
    value: JSON!
  ): Device!

  # (VIRTUAL CONNECTOR): update a simulated device's configuration
  VIRTUAL_CONNECTOR_configureDevice(
    # The value to use as the Linked Account ID. This is only used for permissions.
    linkedAccountId: ID!

    # The device ID that should be updated.
    deviceId: ID!

    # Traits to update the device with
    traits: JSON!
  ): Device!

  # (VIRTUAL CONNECTOR): simulate updating an actions status
  VIRTUAL_CONNECTOR_updateActionStatus(
    # The value to use as the Linked Account ID. This is only used for permissions.
    linkedAccountId: ID!

    # The device ID that should be updated.
    deviceId: ID!

    # The action ID that should be updated.
    actionId: ID!

    # The status the action should be set to
    status: VIRTUAL_CONNECTOR_ActionStatus! = REJECTED
  ): Device!

  # (PARTNER API): Create a new integration
  PARTNER_createIntegration(
    # The display name of the the integration
    displayName: String
    oAuth: JSON
  ): Integration!

  # (PARTNER API): Create a new integration that uses a deployed test connector and auth server
  PARTNER_createMockIntegration(
    # The display name of the the integration
    displayName: String
  ): JSON!

  # (ADMIN API): Set the enabled integrations for current tenant
  ADMIN_setIntegrations(
    # The IDs of all the integrations to enable
    integrationIds: [ID!]!
  ): [Integration!]!
}

# The various modes a thermostat can be set to.
enum ThermostatMode {
  # All activity is suspended.
  OFF

  # Both heating and cooling mode can engage in order to support
  # keeping the temperature within a specific range.
  #
  AUTO

  # The heater can engage.
  HEAT

  # The A/C can engage.
  COOL

  # Neither the heater nor A/C is engaged, but the fan is running.
  FANONLY

  # The thermostat is in `dehumidify` mode.
  DEHUMIDIFY

  # The thermostat is in `airflow` mode.
  AIRFLOW
}

# The various possible fan modes for a device.
enum FanMode {
  # The fan is always on.
  ON

  # The fan runs when needed.
  AUTO

  # The fan runs in order circulate air.
  CIRCULATE

  # The fan is in `sway` mode.
  SWAY

  # The fan is in `wind` mode.
  WIND

  # The fan is in `health` mode.
  HEALTH

  # The fan is in `humidity` mode.
  HUMIDITY

  # The fan is in `eco` mode.
  ECO

  # The fan is in `energy` mode.
  ENERGY

  # The fan is in `fresh` mode.
  FRESH

  # The fan is in `taste` mode.
  TASTE

  # The fan is on the `low` setting.
  LOW

  # The fan is on the `medium` setting.
  MEDIUM

  # The fan is on the `high` setting.
  HIGH
}

# The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
scalar JSONObject

enum TraitName {
  # Functionality for devices that report their current battery level.
  BATTERY_LEVEL

  # Functionality for devices that can have their brightness adjusted.
  BRIGHTNESS

  # Functionality for devices that can be locked or unlocked.
  LOCK_UNLOCK

  # Functionality for devices that can be turned on or off.
  POWER

  # Functionality for devices that are used to control and monitor temperature.
  THERMOSTAT_SETTING
}

# A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
scalar DateTime

enum VIRTUAL_CONNECTOR_ActionStatus {
  RESOLVED
  REJECTED
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

type CreateActionResponse {
  # The device that was targeted by this action
  device: Device!

  # The transaction ID for this action
  transactionId: ID!

  # The ID for this action
  actionId: ID!
}

type User {
  id: ID!
  displayName: String!
  firstActivityAt: DateTime!
  lastActivityAt: DateTime!

  # All devices this user can access.
  devices(
    # Limit the paged response to a max number of items.
    first: Int = 10

    # Used to indicated where in the result set the paged response should start.
    after: String
    filter: DeviceFilterInput

    # Filter devices by linked account ID
    linkedAccountId: ID
  ): DeviceConnection!

  # Linked accounts
  linkedAccounts(
    # Limit the paged response to a max number of items.
    first: Int = 10

    # Used to indicated where in the result set the paged response should start.
    after: String
  ): LinkedAccountConnection!
}

# A filter that can be used to narrow device queries based on various criteria.
input DeviceFilterInput {
  # If provided, this query will only return devices that have at least one trait in the list.
  traits: [TraitName!]!
}

# A single edge from a connection to User nodes.
type UserEdge {
  cursor: String!
  node: User!
}

# A connection to a collection of User edges.
type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge!]!
}

# A 3rd party integration
type Integration {
  # 3rd party integration ID
  id: String!

  # 3rd party integration display name
  displayName: String!
}

# A single edge from a connection to Integration nodes.
type IntegrationEdge {
  cursor: String!
  node: Integration!
}

# A connection to a collection of Integration edges.
type IntegrationConnection {
  pageInfo: PageInfo!
  edges: [IntegrationEdge!]!
}

type LinkedAccount {
  # Linked account ID
  id: ID!

  # Datetime when account was first authorized
  createdAt: DateTime!
  devices(
    # Limit the paged response to a max number of items.
    first: Int = 10

    # Used to indicated where in the result set the paged response should start.
    after: String
    filter: DeviceFilterInput
  ): DeviceConnection!
  status: LinkedAccountAuthorizedStatus!
  integration: Integration!
}

enum LinkedAccountAuthorizedStatus {
  # The account is authorized
  AUTHORIZED

  # The account exists but is not authorized
  NOT_AUTHORIZED
}

# A single edge from a connection to LinkedAccount nodes.
type LinkedAccountEdge {
  cursor: String!
  node: LinkedAccount!
}

# A connection to a collection of LinkedAccount edges.
type LinkedAccountConnection {
  pageInfo: PageInfo!
  edges: [LinkedAccountEdge!]!
}

type GeneratedAccountLinkingUrl {
  # A single-use URL to kick-off an account linking instance. Expires in 3 minutes.
  url: String!
  integration: Integration!
}

type RemoveLinkedAccountResponse {
  # The currently logged in user. This is the primary entry point into a user's data graph
  me: User!
}

type Tenant {
  id: ID!
  displayName: String!
}

interface Event {
  # The type of the event.
  type: String!

  # When this event occurred.
  timestamp: DateTime!
}

type ActionCreatedEvent implements Event {
  # The type of the event.
  type: String!

  # When this event occurred.
  timestamp: DateTime!

  # The device ID that this action event relates to.
  digitalTwinId: ID!

  # The Digital Twin transaction ID that this event relates to.
  dtTransactionId: ID!

  # The user ID of the user that created the action.
  userId: ID!

  # The action ID of the action this event relates to.
  actionId: ID!
  traitName: TraitName!

  # The identifier for the specific trait instance this event targeted.
  traitInstance: String!

  # The state field being updated.
  parameters: JSONObject!
}

type ActionUpdatedEvent implements Event {
  # The type of the event.
  type: String!

  # When this event occurred.
  timestamp: DateTime!

  # The device ID that this action event relates to.
  digitalTwinId: ID!

  # The Digital Twin transaction ID that this event relates to.
  dtTransactionId: ID!

  # The action ID of the action this event relates to.
  actionId: ID!
  traitName: TraitName!

  # The identifier for the specific trait instance this event targeted.
  traitInstance: String!

  # The status state that the action is in.
  status: String!
}

type StateUpdatedEvent implements Event {
  # The type of the event.
  type: String!

  # When this event occurred.
  timestamp: DateTime!
  digitalTwinId: ID!
  dtTransactionId: ID!
  traitName: TraitName!

  # The identifier for the specific trait instance this event targeted.
  traitInstance: String!

  # The state field being updated.
  fieldName: String!
  value: JSON

  # The actionId of the corresponding action.
  actionId: ID

  # When this event occurred.
  sampledAt: DateTime
}

type StateClearedEvent implements Event {
  # The type of the event.
  type: String!

  # When this event occurred.
  timestamp: DateTime!
  digitalTwinId: ID!
  traitName: TraitName!

  # The identifier for the specific trait instance this event targeted.
  traitInstance: String!

  # The state field being updated.
  fieldName: String!
}

type DigitalTwinConfiguredEvent implements Event {
  # The type of the event.
  type: String!

  # When this event occurred.
  timestamp: DateTime!
  digitalTwinId: ID!
  traits: [JSONObject!]!
}

# A single edge from a connection to Event nodes.
type EventEdge {
  cursor: String!
  node: Event!
}

# A connection to a collection of Event edges.
type EventConnection {
  pageInfo: PageInfo!
  edges: [EventEdge!]!
}

# Represents an inclusive range between two integers.
type IntRange {
  min: Int!
  max: Int!
}

# Represents an inclusive range between two floats.
type FloatRange {
  min: Float!
  max: Float!
}

# The base DeviceTrait interface.
interface DeviceTrait {
  # The name of this device trait.
  name: TraitName!

  # Devices can have multiple "instances" of a given trait. This property is used to differentiate those separate instances
  instance: String!
}

# The base trait reported state field interface.
interface ReportedStateField {
  # The DateTime that this reported state value was persisted to the platform.
  createdAt: DateTime!

  # The DateTime that this reported state value was sampled (recorded) by the device
  sampledAt: DateTime!
}

# The base trait desired state field interface.
interface DesiredStateField {
  # The datetime that this desired state value was most recently updated.
  updatedAt: DateTime!
}

# Information about the reported BatteryLevel state for the batteryLevel field.
type BatteryLevelStateReportedBatteryLevel implements ReportedStateField {
  # The DateTime that this reported state value was persisted to the platform.
  createdAt: DateTime!

  # The DateTime that this reported state value was sampled (recorded) by the device
  sampledAt: DateTime!

  # Current battery level of the device.
  value: Int!
}

# Information about the desired BatteryLevel state for the batteryLevel field.
type BatteryLevelStateDesiredBatteryLevel implements DesiredStateField {
  # The datetime that this desired state value was most recently updated.
  updatedAt: DateTime!

  # Current battery level of the device.
  value: Int!

  # Current battery level of the device.
  delta: Int
}

# Information about the BatteryLevel state for the batteryLevel field
type BatteryLevelStateBatteryLevelField {
  # The most recently reported state. May be null if the device has not yet reported it's state
  reported: BatteryLevelStateReportedBatteryLevel

  # The device's desired state. May be null if the device has not yet reported it's state.
  desired: BatteryLevelStateDesiredBatteryLevel

  # The device's history of states.
  history(
    # The type of events to return.
    type: EventTypeInput

    # Limit the paged response to a max number of items.
    first: Int = 10

    # Used to indicated where in the result set the paged response should start.
    after: String
    filter: EventFilterInput
    sort: EventSortInput
  ): EventConnection!
}

enum EventTypeInput {
  # Events related to action events.
  ACTION

  # Event of type "action created"
  ACTION_CREATED

  # Event of type "action updated"
  ACTION_UPDATED

  # Events related to state events.
  STATE

  # Event of type "state updated".
  STATE_UPDATED

  # Event of type "state cleared".
  STATE_CLEARED

  # Events related to "digital twin" events.
  DIGITAL_TWIN

  # Event of type "digital twin configured".
  DIGITAL_TWIN_CONFIGURED
}

# A filter that can be used to narrow event queries based on various criteria.
input EventFilterInput {
  # If provided, this query will only return events that match a time period.
  timePeriod: PartialDateTime

  # If provided, this query will only return events that are before a time period.
  beforeTimePeriod: PartialDateTime

  # If provided, this query will only return events that are after a time period.
  afterTimePeriod: PartialDateTime

  # If provided, filter events by this trait instance.
  traitInstance: String

  # If provided, filter events by list of traits.
  traits: [TraitName!]

  # If provided, filter events by list of states.
  states: [String!]
}

# A field whose value matches the provided regular expression /^(\d{4}(-(0[1-9]|1[012]))?(-(0[1-9]|[12][0-9]|3[01]))?(T([01][0-9]|2[0-3]))?(:([0-5][0-9]))?(:([0-5][0-9]|60))?)?(\.\d{1,})?(([Z])|([+|-]([01][0-9]|2[0-3]):[0-5][0-9]))?$/.
scalar PartialDateTime

# If provided, returned events will be sorted based on timestamp.
enum EventSortInput {
  # Order events by ascending timestamps.
  ASCENDING

  # Order events be descending timestamps.
  DESCENDING
}

# The state information for the BatteryLevel trait
type BatteryLevelState {
  # Current battery level of the device.
  batteryLevel: BatteryLevelStateBatteryLevelField!
}

type BatteryLevelDeviceTrait implements DeviceTrait {
  # The name of this device trait.
  name: TraitName!

  # Devices can have multiple "instances" of a given trait. This property is used to differentiate those separate instances
  instance: String!

  # The BatteryLevel state of this device.
  state: BatteryLevelState!
}

# Information about the reported Brightness state for the brightness field.
type BrightnessStateReportedBrightness implements ReportedStateField {
  # The DateTime that this reported state value was persisted to the platform.
  createdAt: DateTime!

  # The DateTime that this reported state value was sampled (recorded) by the device
  sampledAt: DateTime!

  # Current absolute brightness level of this device.
  value: Int!
}

# Information about the desired Brightness state for the brightness field.
type BrightnessStateDesiredBrightness implements DesiredStateField {
  # The datetime that this desired state value was most recently updated.
  updatedAt: DateTime!

  # Current absolute brightness level of this device.
  value: Int!

  # Current absolute brightness level of this device.
  delta: Int
}

# Information about the Brightness state for the brightness field
type BrightnessStateBrightnessField {
  # The most recently reported state. May be null if the device has not yet reported it's state
  reported: BrightnessStateReportedBrightness

  # The device's desired state. May be null if the device has not yet reported it's state.
  desired: BrightnessStateDesiredBrightness

  # The device's history of states.
  history(
    # The type of events to return.
    type: EventTypeInput

    # Limit the paged response to a max number of items.
    first: Int = 10

    # Used to indicated where in the result set the paged response should start.
    after: String
    filter: EventFilterInput
    sort: EventSortInput
  ): EventConnection!
}

# The state information for the Brightness trait
type BrightnessState {
  # Current absolute brightness level of this device.
  brightness: BrightnessStateBrightnessField!
}

# The properties (trait configuration) payload for the Brightness trait
type BrightnessProperties {
  # Indicates if this device supports relative brightness changes.
  #
  supportsRelativeBrightness: Boolean!
}

type BrightnessDeviceTrait implements DeviceTrait {
  # The name of this device trait.
  name: TraitName!

  # Devices can have multiple "instances" of a given trait. This property is used to differentiate those separate instances
  instance: String!

  # The Brightness configuration for this device.
  properties: BrightnessProperties!

  # The Brightness state of this device.
  state: BrightnessState!
}

# Information about the reported LockUnlock state for the isLocked field.
type LockUnlockStateReportedIsLocked implements ReportedStateField {
  # The DateTime that this reported state value was persisted to the platform.
  createdAt: DateTime!

  # The DateTime that this reported state value was sampled (recorded) by the device
  sampledAt: DateTime!

  # Indicates whether the device is currently locked.
  value: Boolean!
}

# Information about the desired LockUnlock state for the isLocked field.
type LockUnlockStateDesiredIsLocked implements DesiredStateField {
  # The datetime that this desired state value was most recently updated.
  updatedAt: DateTime!

  # Indicates whether the device is currently locked.
  value: Boolean!

  # Indicates whether the device is currently locked.
  delta: Boolean
}

# Information about the LockUnlock state for the isLocked field
type LockUnlockStateIsLockedField {
  # The most recently reported state. May be null if the device has not yet reported it's state
  reported: LockUnlockStateReportedIsLocked

  # The device's desired state. May be null if the device has not yet reported it's state.
  desired: LockUnlockStateDesiredIsLocked

  # The device's history of states.
  history(
    # The type of events to return.
    type: EventTypeInput

    # Limit the paged response to a max number of items.
    first: Int = 10

    # Used to indicated where in the result set the paged response should start.
    after: String
    filter: EventFilterInput
    sort: EventSortInput
  ): EventConnection!
}

# Information about the reported LockUnlock state for the isJammed field.
type LockUnlockStateReportedIsJammed implements ReportedStateField {
  # The DateTime that this reported state value was persisted to the platform.
  createdAt: DateTime!

  # The DateTime that this reported state value was sampled (recorded) by the device
  sampledAt: DateTime!

  # Indicates whether the device is currently jammed, hence the locked
  # status couldn’t be determined.
  #
  value: Boolean!
}

# Information about the desired LockUnlock state for the isJammed field.
type LockUnlockStateDesiredIsJammed implements DesiredStateField {
  # The datetime that this desired state value was most recently updated.
  updatedAt: DateTime!

  # Indicates whether the device is currently jammed, hence the locked
  # status couldn’t be determined.
  #
  value: Boolean!

  # Indicates whether the device is currently jammed, hence the locked
  # status couldn’t be determined.
  #
  delta: Boolean
}

# Information about the LockUnlock state for the isJammed field
type LockUnlockStateIsJammedField {
  # The most recently reported state. May be null if the device has not yet reported it's state
  reported: LockUnlockStateReportedIsJammed

  # The device's desired state. May be null if the device has not yet reported it's state.
  desired: LockUnlockStateDesiredIsJammed

  # The device's history of states.
  history(
    # The type of events to return.
    type: EventTypeInput

    # Limit the paged response to a max number of items.
    first: Int = 10

    # Used to indicated where in the result set the paged response should start.
    after: String
    filter: EventFilterInput
    sort: EventSortInput
  ): EventConnection!
}

# The state information for the LockUnlock trait
type LockUnlockState {
  # Indicates whether the device is currently locked.
  isLocked: LockUnlockStateIsLockedField!

  # Indicates whether the device is currently jammed, hence the locked
  # status couldn’t be determined.
  #
  isJammed: LockUnlockStateIsJammedField!
}

# The properties (trait configuration) payload for the LockUnlock trait
type LockUnlockProperties {
  # Indicates if the lock supports reporting its state as jammed implying that its lock status cannot be determined.
  #
  supportsIsJammed: Boolean!
}

type LockUnlockDeviceTrait implements DeviceTrait {
  # The name of this device trait.
  name: TraitName!

  # Devices can have multiple "instances" of a given trait. This property is used to differentiate those separate instances
  instance: String!

  # The LockUnlock configuration for this device.
  properties: LockUnlockProperties!

  # The LockUnlock state of this device.
  state: LockUnlockState!
}

# Information about the reported Power state for the power field.
type PowerStateReportedPower implements ReportedStateField {
  # The DateTime that this reported state value was persisted to the platform.
  createdAt: DateTime!

  # The DateTime that this reported state value was sampled (recorded) by the device
  sampledAt: DateTime!

  # Whether a device’s power state is on or off.
  value: Boolean!
}

# Information about the desired Power state for the power field.
type PowerStateDesiredPower implements DesiredStateField {
  # The datetime that this desired state value was most recently updated.
  updatedAt: DateTime!

  # Whether a device’s power state is on or off.
  value: Boolean!

  # Whether a device’s power state is on or off.
  delta: Boolean
}

# Information about the Power state for the power field
type PowerStatePowerField {
  # The most recently reported state. May be null if the device has not yet reported it's state
  reported: PowerStateReportedPower

  # The device's desired state. May be null if the device has not yet reported it's state.
  desired: PowerStateDesiredPower

  # The device's history of states.
  history(
    # The type of events to return.
    type: EventTypeInput

    # Limit the paged response to a max number of items.
    first: Int = 10

    # Used to indicated where in the result set the paged response should start.
    after: String
    filter: EventFilterInput
    sort: EventSortInput
  ): EventConnection!
}

# The state information for the Power trait
type PowerState {
  # Whether a device’s power state is on or off.
  power: PowerStatePowerField!
}

# The properties (trait configuration) payload for the Power trait
type PowerProperties {
  # Indicates if the device could be toggled
  supportsToggle: Boolean!

  # Indicates if the device actually has distinct On and Off features as opposed to a single power button.
  supportsDiscreteOnOff: Boolean!
}

type PowerDeviceTrait implements DeviceTrait {
  # The name of this device trait.
  name: TraitName!

  # Devices can have multiple "instances" of a given trait. This property is used to differentiate those separate instances
  instance: String!

  # The Power configuration for this device.
  properties: PowerProperties!

  # The Power state of this device.
  state: PowerState!
}

# Information about the reported ThermostatSetting state for the mode field.
type ThermostatSettingStateReportedMode implements ReportedStateField {
  # The DateTime that this reported state value was persisted to the platform.
  createdAt: DateTime!

  # The DateTime that this reported state value was sampled (recorded) by the device
  sampledAt: DateTime!

  # Current mode of the device, within the range of values as defined by availableThermostatModes.
  value: ThermostatMode!
}

# Information about the desired ThermostatSetting state for the mode field.
type ThermostatSettingStateDesiredMode implements DesiredStateField {
  # The datetime that this desired state value was most recently updated.
  updatedAt: DateTime!

  # Current mode of the device, within the range of values as defined by availableThermostatModes.
  value: ThermostatMode!

  # Current mode of the device, within the range of values as defined by availableThermostatModes.
  delta: ThermostatMode
}

# Information about the ThermostatSetting state for the mode field
type ThermostatSettingStateModeField {
  # The most recently reported state. May be null if the device has not yet reported it's state
  reported: ThermostatSettingStateReportedMode

  # The device's desired state. May be null if the device has not yet reported it's state.
  desired: ThermostatSettingStateDesiredMode

  # The device's history of states.
  history(
    # The type of events to return.
    type: EventTypeInput

    # Limit the paged response to a max number of items.
    first: Int = 10

    # Used to indicated where in the result set the paged response should start.
    after: String
    filter: EventFilterInput
    sort: EventSortInput
  ): EventConnection!
}

# Information about the reported ThermostatSetting state for the targetTemperature field.
type ThermostatSettingStateReportedTargetTemperature implements ReportedStateField {
  # The DateTime that this reported state value was persisted to the platform.
  createdAt: DateTime!

  # The DateTime that this reported state value was sampled (recorded) by the device
  sampledAt: DateTime!

  # Single temperature set point the device is currently programmed at.
  value: Float!
}

# Information about the desired ThermostatSetting state for the targetTemperature field.
type ThermostatSettingStateDesiredTargetTemperature implements DesiredStateField {
  # The datetime that this desired state value was most recently updated.
  updatedAt: DateTime!

  # Single temperature set point the device is currently programmed at.
  value: Float!

  # Single temperature set point the device is currently programmed at.
  delta: Float
}

# Information about the ThermostatSetting state for the targetTemperature field
type ThermostatSettingStateTargetTemperatureField {
  # The most recently reported state. May be null if the device has not yet reported it's state
  reported: ThermostatSettingStateReportedTargetTemperature

  # The device's desired state. May be null if the device has not yet reported it's state.
  desired: ThermostatSettingStateDesiredTargetTemperature

  # The device's history of states.
  history(
    # The type of events to return.
    type: EventTypeInput

    # Limit the paged response to a max number of items.
    first: Int = 10

    # Used to indicated where in the result set the paged response should start.
    after: String
    filter: EventFilterInput
    sort: EventSortInput
  ): EventConnection!
}

# Information about the reported ThermostatSetting state for the ambientTemperature field.
type ThermostatSettingStateReportedAmbientTemperature implements ReportedStateField {
  # The DateTime that this reported state value was persisted to the platform.
  createdAt: DateTime!

  # The DateTime that this reported state value was sampled (recorded) by the device
  sampledAt: DateTime!

  # Current observed temperature in temperatureUnit.
  value: Float!
}

# Information about the desired ThermostatSetting state for the ambientTemperature field.
type ThermostatSettingStateDesiredAmbientTemperature implements DesiredStateField {
  # The datetime that this desired state value was most recently updated.
  updatedAt: DateTime!

  # Current observed temperature in temperatureUnit.
  value: Float!

  # Current observed temperature in temperatureUnit.
  delta: Float
}

# Information about the ThermostatSetting state for the ambientTemperature field
type ThermostatSettingStateAmbientTemperatureField {
  # The most recently reported state. May be null if the device has not yet reported it's state
  reported: ThermostatSettingStateReportedAmbientTemperature

  # The device's desired state. May be null if the device has not yet reported it's state.
  desired: ThermostatSettingStateDesiredAmbientTemperature

  # The device's history of states.
  history(
    # The type of events to return.
    type: EventTypeInput

    # Limit the paged response to a max number of items.
    first: Int = 10

    # Used to indicated where in the result set the paged response should start.
    after: String
    filter: EventFilterInput
    sort: EventSortInput
  ): EventConnection!
}

# Information about the reported ThermostatSetting state for the setpointHigh field.
type ThermostatSettingStateReportedSetpointHigh implements ReportedStateField {
  # The DateTime that this reported state value was persisted to the platform.
  createdAt: DateTime!

  # The DateTime that this reported state value was sampled (recorded) by the device
  sampledAt: DateTime!

  # Higher end of the range for auto mode.
  value: Float!
}

# Information about the desired ThermostatSetting state for the setpointHigh field.
type ThermostatSettingStateDesiredSetpointHigh implements DesiredStateField {
  # The datetime that this desired state value was most recently updated.
  updatedAt: DateTime!

  # Higher end of the range for auto mode.
  value: Float!

  # Higher end of the range for auto mode.
  delta: Float
}

# Information about the ThermostatSetting state for the setpointHigh field
type ThermostatSettingStateSetpointHighField {
  # The most recently reported state. May be null if the device has not yet reported it's state
  reported: ThermostatSettingStateReportedSetpointHigh

  # The device's desired state. May be null if the device has not yet reported it's state.
  desired: ThermostatSettingStateDesiredSetpointHigh

  # The device's history of states.
  history(
    # The type of events to return.
    type: EventTypeInput

    # Limit the paged response to a max number of items.
    first: Int = 10

    # Used to indicated where in the result set the paged response should start.
    after: String
    filter: EventFilterInput
    sort: EventSortInput
  ): EventConnection!
}

# Information about the reported ThermostatSetting state for the setpointLow field.
type ThermostatSettingStateReportedSetpointLow implements ReportedStateField {
  # The DateTime that this reported state value was persisted to the platform.
  createdAt: DateTime!

  # The DateTime that this reported state value was sampled (recorded) by the device
  sampledAt: DateTime!

  # Lower end of the range for auto mode.
  value: Float!
}

# Information about the desired ThermostatSetting state for the setpointLow field.
type ThermostatSettingStateDesiredSetpointLow implements DesiredStateField {
  # The datetime that this desired state value was most recently updated.
  updatedAt: DateTime!

  # Lower end of the range for auto mode.
  value: Float!

  # Lower end of the range for auto mode.
  delta: Float
}

# Information about the ThermostatSetting state for the setpointLow field
type ThermostatSettingStateSetpointLowField {
  # The most recently reported state. May be null if the device has not yet reported it's state
  reported: ThermostatSettingStateReportedSetpointLow

  # The device's desired state. May be null if the device has not yet reported it's state.
  desired: ThermostatSettingStateDesiredSetpointLow

  # The device's history of states.
  history(
    # The type of events to return.
    type: EventTypeInput

    # Limit the paged response to a max number of items.
    first: Int = 10

    # Used to indicated where in the result set the paged response should start.
    after: String
    filter: EventFilterInput
    sort: EventSortInput
  ): EventConnection!
}

# Information about the reported ThermostatSetting state for the ambientHumidity field.
type ThermostatSettingStateReportedAmbientHumidity implements ReportedStateField {
  # The DateTime that this reported state value was persisted to the platform.
  createdAt: DateTime!

  # The DateTime that this reported state value was sampled (recorded) by the device
  sampledAt: DateTime!

  # Observed humidity.
  value: Float!
}

# Information about the desired ThermostatSetting state for the ambientHumidity field.
type ThermostatSettingStateDesiredAmbientHumidity implements DesiredStateField {
  # The datetime that this desired state value was most recently updated.
  updatedAt: DateTime!

  # Observed humidity.
  value: Float!

  # Observed humidity.
  delta: Float
}

# Information about the ThermostatSetting state for the ambientHumidity field
type ThermostatSettingStateAmbientHumidityField {
  # The most recently reported state. May be null if the device has not yet reported it's state
  reported: ThermostatSettingStateReportedAmbientHumidity

  # The device's desired state. May be null if the device has not yet reported it's state.
  desired: ThermostatSettingStateDesiredAmbientHumidity

  # The device's history of states.
  history(
    # The type of events to return.
    type: EventTypeInput

    # Limit the paged response to a max number of items.
    first: Int = 10

    # Used to indicated where in the result set the paged response should start.
    after: String
    filter: EventFilterInput
    sort: EventSortInput
  ): EventConnection!
}

# Information about the reported ThermostatSetting state for the targetHumidity field.
type ThermostatSettingStateReportedTargetHumidity implements ReportedStateField {
  # The DateTime that this reported state value was persisted to the platform.
  createdAt: DateTime!

  # The DateTime that this reported state value was sampled (recorded) by the device
  sampledAt: DateTime!

  # Single humidity set point the device is currently programmed at.
  value: Float!
}

# Information about the desired ThermostatSetting state for the targetHumidity field.
type ThermostatSettingStateDesiredTargetHumidity implements DesiredStateField {
  # The datetime that this desired state value was most recently updated.
  updatedAt: DateTime!

  # Single humidity set point the device is currently programmed at.
  value: Float!

  # Single humidity set point the device is currently programmed at.
  delta: Float
}

# Information about the ThermostatSetting state for the targetHumidity field
type ThermostatSettingStateTargetHumidityField {
  # The most recently reported state. May be null if the device has not yet reported it's state
  reported: ThermostatSettingStateReportedTargetHumidity

  # The device's desired state. May be null if the device has not yet reported it's state.
  desired: ThermostatSettingStateDesiredTargetHumidity

  # The device's history of states.
  history(
    # The type of events to return.
    type: EventTypeInput

    # Limit the paged response to a max number of items.
    first: Int = 10

    # Used to indicated where in the result set the paged response should start.
    after: String
    filter: EventFilterInput
    sort: EventSortInput
  ): EventConnection!
}

# Information about the reported ThermostatSetting state for the fanMode field.
type ThermostatSettingStateReportedFanMode implements ReportedStateField {
  # The DateTime that this reported state value was persisted to the platform.
  createdAt: DateTime!

  # The DateTime that this reported state value was sampled (recorded) by the device
  sampledAt: DateTime!

  # Current Fan mode of the device, within the range of values as defined by availableFanModes.
  value: FanMode!
}

# Information about the desired ThermostatSetting state for the fanMode field.
type ThermostatSettingStateDesiredFanMode implements DesiredStateField {
  # The datetime that this desired state value was most recently updated.
  updatedAt: DateTime!

  # Current Fan mode of the device, within the range of values as defined by availableFanModes.
  value: FanMode!

  # Current Fan mode of the device, within the range of values as defined by availableFanModes.
  delta: FanMode
}

# Information about the ThermostatSetting state for the fanMode field
type ThermostatSettingStateFanModeField {
  # The most recently reported state. May be null if the device has not yet reported it's state
  reported: ThermostatSettingStateReportedFanMode

  # The device's desired state. May be null if the device has not yet reported it's state.
  desired: ThermostatSettingStateDesiredFanMode

  # The device's history of states.
  history(
    # The type of events to return.
    type: EventTypeInput

    # Limit the paged response to a max number of items.
    first: Int = 10

    # Used to indicated where in the result set the paged response should start.
    after: String
    filter: EventFilterInput
    sort: EventSortInput
  ): EventConnection!
}

# The state information for the ThermostatSetting trait
type ThermostatSettingState {
  # Current mode of the device, within the range of values as defined by availableThermostatModes.
  mode: ThermostatSettingStateModeField!

  # Single temperature set point the device is currently programmed at.
  targetTemperature: ThermostatSettingStateTargetTemperatureField!

  # Current observed temperature in temperatureUnit.
  ambientTemperature: ThermostatSettingStateAmbientTemperatureField!

  # Higher end of the range for auto mode.
  setpointHigh: ThermostatSettingStateSetpointHighField!

  # Lower end of the range for auto mode.
  setpointLow: ThermostatSettingStateSetpointLowField!

  # Observed humidity.
  ambientHumidity: ThermostatSettingStateAmbientHumidityField!

  # Single humidity set point the device is currently programmed at.
  targetHumidity: ThermostatSettingStateTargetHumidityField!

  # Current Fan mode of the device, within the range of values as defined by availableFanModes.
  fanMode: ThermostatSettingStateFanModeField!
}

# The properties (trait configuration) payload for the ThermostatSetting trait
type ThermostatSettingProperties {
  # Supported modes by the device.
  availableThermostatModes: [ThermostatMode!]!

  # Supported fan modes by the device.
  availableFanModes: [FanMode!]!
}

type ThermostatSettingDeviceTrait implements DeviceTrait {
  # The name of this device trait.
  name: TraitName!

  # Devices can have multiple "instances" of a given trait. This property is used to differentiate those separate instances
  instance: String!

  # The ThermostatSetting configuration for this device.
  properties: ThermostatSettingProperties!

  # The ThermostatSetting state of this device.
  state: ThermostatSettingState!
}

type Device {
  id: ID!

  # The display name of this device.
  displayName: String!

  # A description of this device.
  description: String!

  # The manufacturer of this device.
  manufacturerName: String!

  # Model number or model name of this device.
  model: String

  # Current firmware version of this device.
  firmwareVersion: String

  # Current software version of this device.
  softwareVersion: String

  # Serial number of this device.
  serialNumber: String

  # When this device was created.
  createdAt: DateTime!

  # When this device was last updated.
  updatedAt: DateTime!

  # All of the instances of the traits that this device implements.
  traits: [DeviceTrait!]!

  # All events for this device.
  events(
    # The type of events to return.
    type: EventTypeInput

    # Limit the paged response to a max number of items.
    first: Int = 10

    # Used to indicated where in the result set the paged response should start.
    after: String
    filter: EventFilterInput
    sort: EventSortInput
  ): EventConnection!
}

# A single edge from a connection to Device nodes.
type DeviceEdge {
  cursor: String!
  node: Device!
}

# A connection to a collection of Device edges.
type DeviceConnection {
  pageInfo: PageInfo!
  edges: [DeviceEdge!]!
}
