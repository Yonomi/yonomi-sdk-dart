type Health {
  ok: Boolean!
}

type Query {
  health: Health!

  # The currently logged in user. This is the primary entry point into a user's data graph
  me: User!
  integrations(
    # Limit the paged response to a max number of items.
    first: Int = 10

    # Used to indicated where in the result set the paged response should start.
    after: String
  ): IntegrationConnection!
  integration(
    # The id of the integration
    id: ID!
  ): Integration!

  # The currently logged in user's tenant.
  tenant: Tenant!

  # Query for a specific device.
  device(
    # The id of a specific device.
    id: ID!
  ): Device
}

type Mutation {
  # This mutation allows the user to remove their data from the platform.
  removeMyUser: ID!

  # Generate an account linking URL for a specific integration.
  generateAccountLinkingUrl(
    # The id of the integration
    integrationId: ID!
  ): GeneratedAccountLinkingUrl!

  # Remove a linked account
  removeLinkedAccount(
    # The id of the linked account
    linkedAccountId: ID!
  ): RemoveLinkedAccountResponse!

  # Generate an account relinking URL for a specific account.
  generateAccountRelinkingUrl(
    # The id of the account to relink
    linkedAccountId: ID!
  ): GeneratedAccountRelinkingUrl!

  # *BETA API* This mutation allows ownership of a device to be claimed.
  CLAIMABLE_claimOwnership(
    # Claim token for the device to claim.
    claimToken: String!
  ): ClaimableDevice!

  # *BETA API* This mutation allows an owner to unclaim a device.
  CLAIMABLE_unclaimOwnership(
    # ID of device to unclaim.
    deviceId: String!
  ): ClaimableDevice!

  # Add a card credential to the device.
  actionBetaCardCredentialCreateCardCredential(
    # The target device's id
    deviceId: ID!

    # The identifier for the specific trait instance this action is targeting.
    traitInstance: String! = "default"

    # The card credential to add to list of card credentials.
    #
    cardCredential: BetaCardCredentialInput!
  ): CreateActionResponse!

  # Update an existing card credential on the device.
  actionBetaCardCredentialUpdateCardCredential(
    # The target device's id
    deviceId: ID!

    # The identifier for the specific trait instance this action is targeting.
    traitInstance: String! = "default"

    # The card credential to update in the list of card credentials.
    cardCredential: BetaCardCredentialInput!
  ): CreateActionResponse!

  # Revoke access for the card credential with `id` from the device.
  actionBetaCardCredentialDeleteCardCredential(
    # The target device's id
    deviceId: ID!

    # The identifier for the specific trait instance this action is targeting.
    traitInstance: String! = "default"

    # The `id` of the card credential to remove.
    id: String!
  ): CreateActionResponse!

  # Initiate the download and installation of the latest firmware for the device at the specified time.
  actionBetaFirmwareScheduleLatestFirmwareUpdate(
    # The target device's id
    deviceId: ID!

    # The identifier for the specific trait instance this action is targeting.
    traitInstance: String! = "default"

    # The time to initiate the firmware update process.
    scheduleAt: DateTime!
  ): CreateActionResponse!

  # Initiate the download and installation of the latest firmware for the device immediately.
  actionBetaFirmwareInstallLatestFirmwareUpdate(
    # The target device's id
    deviceId: ID!

    # The identifier for the specific trait instance this action is targeting.
    traitInstance: String! = "default"
  ): CreateActionResponse!

  # Set the absolute brightness percentage of this device over a period of time.
  actionBetaLightEffectsSetBrightnessPercentageWithTransition(
    # The target device's id
    deviceId: ID!

    # The identifier for the specific trait instance this action is targeting.
    traitInstance: String! = "default"

    # The new absolute brightness value.
    brightness: Int!

    # The period of time in milliseconds to transition to the new value.
    transition: Int!
  ): CreateActionResponse!

  # Set the absolute color value of this device over a period of time.
  actionBetaLightEffectsSetColorWithTransition(
    # The target device's id
    deviceId: ID!

    # The identifier for the specific trait instance this action is targeting.
    traitInstance: String! = "default"

    # The new HSB color value.
    color: HSBColorValueInput!

    # The period of time in milliseconds to transition to the new value.
    transition: Int!
  ): CreateActionResponse!

  # Set the device's color temperature in Kelvin
  actionBetaLightEffectsSetColorTemperatureWithTransition(
    # The target device's id
    deviceId: ID!

    # The identifier for the specific trait instance this action is targeting.
    traitInstance: String! = "default"

    # The device's color temperature in Kelvin.
    colorTemperature: Int!

    # The period of time in milliseconds to transition to the new value.
    transition: Int!
  ): CreateActionResponse!

  # Add a PIN code credential to the device.
  actionBetaPinCodeCredentialsCreatePinCodeCredential(
    # The target device's id
    deviceId: ID!

    # The identifier for the specific trait instance this action is targeting.
    traitInstance: String! = "default"

    # The PIN code credential to add to list of PIN code credentials.
    pinCodeCredential: PinCodeCredentialCreateItemInput!
  ): CreateActionResponse!

  # Update an existing PIN code credential on the device.
  actionBetaPinCodeCredentialsUpdatePinCodeCredential(
    # The target device's id
    deviceId: ID!

    # The identifier for the specific trait instance this action is targeting.
    traitInstance: String! = "default"

    # The PIN code credential to update in the list of PIN code credentials.
    pinCodeCredential: PinCodeCredentialItemInput!
  ): CreateActionResponse!

  # Revoke access for the PIN code credential with `id` from the device.
  actionBetaPinCodeCredentialsDeletePinCodeCredential(
    # The target device's id
    deviceId: ID!

    # The identifier for the specific trait instance this action is targeting.
    traitInstance: String! = "default"

    # The `pinCode` of the PIN code credential to remove.
    #
    id: String!
  ): CreateActionResponse!

  # Set the relock delay for the device.
  actionBetaRelockSetRelockDelay(
    # The target device's id
    deviceId: ID!

    # The identifier for the specific trait instance this action is targeting.
    traitInstance: String! = "default"

    # Value of the desired relock state.
    relockDelay: Int!
  ): CreateActionResponse!

  # Set the absolute brightness of this device.
  actionBrightnessSetBrightnessPercentage(
    # The target device's id
    deviceId: ID!

    # The identifier for the specific trait instance this action is targeting.
    traitInstance: String! = "default"

    # The new absolute brightness value.
    brightness: Int!
  ): CreateActionResponse!

  # Set the absolute color value of this device.
  actionColorSetColor(
    # The target device's id
    deviceId: ID!

    # The identifier for the specific trait instance this action is targeting.
    traitInstance: String! = "default"

    # The new HSB color value.
    color: HSBColorValueInput!
  ): CreateActionResponse!

  # Set the device's color temperature in Kelvin
  actionColorTemperatureSetColorTemperature(
    # The target device's id
    deviceId: ID!

    # The identifier for the specific trait instance this action is targeting.
    traitInstance: String! = "default"

    # The device's color temperature in Kelvin.
    colorTemperature: Int!
  ): CreateActionResponse!

  # Lock (true) or unlock (false) the device.
  actionLockSetLocked(
    # The target device's id
    deviceId: ID!

    # The identifier for the specific trait instance this action is targeting.
    traitInstance: String! = "default"

    # True to lock, false to unlock.
    lock: Boolean!
  ): CreateActionResponse!

  # DEPRECATED: use addPinCodeCredential instead : Add a PIN code credential to the device.
  actionPinCodeCredentialCreatePinCodeCredential(
    # The target device's id
    deviceId: ID!

    # The identifier for the specific trait instance this action is targeting.
    traitInstance: String! = "default"

    # The PIN code credential to add to list of PIN code credentials.
    pinCodeCredential: PinCodeCredentialInput!
  ): CreateActionResponse!

  # DEPRECATED: use modifyPinCodeCredential instead : Update an existing PIN code credential on the device.
  actionPinCodeCredentialUpdatePinCodeCredential(
    # The target device's id
    deviceId: ID!

    # The identifier for the specific trait instance this action is targeting.
    traitInstance: String! = "default"

    # The PIN code credential to update in the list of PIN code credentials.
    pinCodeCredential: PinCodeCredentialInput!
  ): CreateActionResponse!

  # DEPRECATED: use removePinCodeCredential instead : Revoke access for the PIN code credential with `pinCode` from the device.
  actionPinCodeCredentialDeletePinCodeCredential(
    # The target device's id
    deviceId: ID!

    # The identifier for the specific trait instance this action is targeting.
    traitInstance: String! = "default"

    # The `pinCode` of the PIN code credential to remove.
    #
    pinCode: String!
  ): CreateActionResponse!

  # Add a PIN code credential to the device.
  actionPinCodeCredentialAddPinCodeCredential(
    # The target device's id
    deviceId: ID!

    # The identifier for the specific trait instance this action is targeting.
    traitInstance: String! = "default"

    # The PIN code credential to add to list of PIN code credentials.
    pinCodeCredential: PinCodeCredentialListItemInput!
  ): CreateActionResponse!

  # Update an existing PIN code credential on the device.
  actionPinCodeCredentialModifyPinCodeCredential(
    # The target device's id
    deviceId: ID!

    # The identifier for the specific trait instance this action is targeting.
    traitInstance: String! = "default"

    # The PIN code credential to update in the list of PIN code credentials.
    pinCodeCredential: PinCodeCredentialListItemInput!
  ): CreateActionResponse!

  # Revoke access for the PIN code credential with `pinCode` from the device.
  actionPinCodeCredentialRemovePinCodeCredential(
    # The target device's id
    deviceId: ID!

    # The identifier for the specific trait instance this action is targeting.
    traitInstance: String! = "default"

    # The `pinCode` of the PIN code credential to remove.
    #
    pinCode: String!
  ): CreateActionResponse!

  # Whether to turn the device on or off. Should update to reflect argument is only a boolean.
  actionPowerSetOn(
    # The target device's id
    deviceId: ID!

    # The identifier for the specific trait instance this action is targeting.
    traitInstance: String! = "default"

    # Whether to turn the device on (true) or off (false).
    on: Boolean!
  ): CreateActionResponse!

  # Set the mode of the device.
  actionThermostatSettingSetThermostatMode(
    # The target device's id
    deviceId: ID!

    # The identifier for the specific trait instance this action is targeting.
    traitInstance: String! = "default"

    # The mode to set the device to.
    mode: ThermostatMode!
  ): CreateActionResponse!

  # Set the target temperature of the device for the associated mode.
  actionThermostatSettingSetTargetTemperature(
    # The target device's id
    deviceId: ID!

    # The identifier for the specific trait instance this action is targeting.
    traitInstance: String! = "default"

    # The temperature to set the device to in Celsius.
    targetTemperature: Float!
  ): CreateActionResponse!

  # Set the fan mode of the device.
  actionThermostatSettingSetFanMode(
    # The target device's id
    deviceId: ID!

    # The identifier for the specific trait instance this action is targeting.
    traitInstance: String! = "default"

    # The fan mode to set the device to.
    fanMode: FanMode!
  ): CreateActionResponse!

  # Set a temperature range for the device while in a mode that supports a TargetTemperatureRange (auto).
  actionThermostatSettingSetTargetTemperatureRange(
    # The target device's id
    deviceId: ID!

    # The identifier for the specific trait instance this action is targeting.
    traitInstance: String! = "default"

    # The low temperature, in Celsius, to set on the device while in a TargetTemperatureRange mode (auto).
    setPointLow: Float!

    # The high temperature, in Celsius, to set on the device while in a TargetTemperatureRange mode (auto).
    setPointHigh: Float!
  ): CreateActionResponse!

  # Set the mode of the device and optionally the targetTemperature.
  actionThermostatSettingSetThermostatModeAndTargetTemperature(
    # The target device's id
    deviceId: ID!

    # The identifier for the specific trait instance this action is targeting.
    traitInstance: String! = "default"

    # The thermostat mode to set the device to.
    mode: ThermostatMode!

    # The optional temperature value to set the device to, in Celsius.
    targetTemperature: Float
  ): CreateActionResponse!

  # Set the mode of the device and optionally the targetTemperature range.
  actionThermostatSettingSetThermostatModeAndTargetTemperatureRange(
    # The target device's id
    deviceId: ID!

    # The identifier for the specific trait instance this action is targeting.
    traitInstance: String! = "default"

    # The thermostat mode to set the device to.
    mode: ThermostatMode!

    # The optional range to set the thermostat to.
    range: ThermostatRangeInput!
  ): CreateActionResponse!
}

# Mutation input: Encapsulates card credential data
input BetaCardCredentialInput {
  # A card credential.
  credential: String!

  # A unique identifier (UUID) for the card credential.
  id: String!
}

# A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
scalar DateTime

# Mutation input: Represents a color in terms of its hue, saturation, and brightness.
input HSBColorValueInput {
  # The value of the hue attribute for this color.
  h: Int!

  # The value of the saturation percentage attribute for this color.
  s: Int!

  # The absolute brightness percentage value for this color.
  b: Int!
}

# Mutation input: Encapsulates PIN code credential data
input PinCodeCredentialCreateItemInput {
  # A unique identifier to address this pin code credential.
  id: String!

  # A PIN code. This is also the unique identifier for the PIN code credential data.
  pinCode: String!

  # A human-readable name for the PIN code credential data.
  name: String!

  # Indicates that the PIN code credential should always permit access.
  alwaysActive: Boolean!

  # list of schedules that detail a repeated pattern when the PIN code credential should allow access.
  recurringSchedules: [RecurringScheduleInput!]!

  # A set of schedules that provide one-time access using this PIN code credential.
  temporarySchedules: [TemporaryScheduleInput!]!
}

# Mutation input: A schedule that repeats based on an RRULE recurrance pattern.
input RecurringScheduleInput {
  # The number of minutes the schedule should last for. Begins at every time specified by a recurrance rule.
  duration: Int!

  # Repetition rule that describes when the defined schedule repeats.
  rrule: RRuleSchedule!
}

# Represents a date-time schedule (temporary, recurring).
scalar RRuleSchedule

# Mutation input: A schedule that grants access only within the start date-time and end date-time.
input TemporaryScheduleInput {
  # The ISO 8601 compliant start date of the schedule.
  startDatetime: DateTime!

  # The ISO 8601 compliant end date of the schedule.
  endDatetime: DateTime!
}

# Mutation input: Encapsulates PIN code credential data
input PinCodeCredentialItemInput {
  # A unique identifier to address this pin code credential.
  id: String!

  # A PIN code. This is also the unique identifier for the PIN code credential data.
  pinCode: String!

  # A human-readable name for the PIN code credential data.
  name: String!

  # Indicates that the PIN code credential should always permit access.
  alwaysActive: Boolean!

  # list of schedules that detail a repeated pattern when the PIN code credential should allow access.
  recurringSchedules: [RecurringScheduleInput!]!

  # A set of schedules that provide one-time access using this PIN code credential.
  temporarySchedules: [TemporaryScheduleInput!]!
}

# Mutation input: Encapsulates PIN code credential data
input PinCodeCredentialInput {
  # A PIN code. This is also the unique identifier for the PIN code credential data.
  pinCode: String!

  # A human-readable name for the PIN code credential data.
  name: String!

  # A set of schedules by which the device may be accessed via the PIN code credential.
  schedules: [RRuleSchedule!]!
}

# Mutation input: Encapsulates PIN code credential data
input PinCodeCredentialListItemInput {
  # A PIN code. This is also the unique identifier for the PIN code credential data.
  pinCode: String!

  # A human-readable name for the PIN code credential data.
  name: String!

  # Indicates that the PIN code credential should always permit access.
  alwaysActive: Boolean!

  # list of schedules that detail a repeated pattern when the PIN code credential should allow access.
  recurringSchedules: [RecurringScheduleInput!]!

  # A set of schedules that provide one-time access using this PIN code credential.
  temporarySchedules: [TemporaryScheduleInput!]!
}

enum ThermostatMode {
  # All activity is suspended.
  OFF

  # Both heating and cooling mode can engage in order to support keeping the temperature within a specific range.
  AUTO

  # The heater can engage.
  HEAT

  # The A/C can engage.
  COOL

  # Neither the heater nor A/C is engaged, but the fan is running.
  FANONLY

  # The thermostat is in `dehumidify` mode.
  DEHUMIDIFY

  # The thermostat is in `airflow` mode.
  AIRFLOW
}

enum FanMode {
  # The fan is always on.
  ON

  # The fan runs when needed.
  AUTO

  # The fan runs in order circulate air.
  CIRCULATE

  # The fan is in `sway` mode.
  SWAY

  # The fan is in `wind` mode.
  WIND

  # The fan is in `health` mode.
  HEALTH

  # The fan is in `humidity` mode.
  HUMIDITY

  # The fan is in `eco` mode.
  ECO

  # The fan is in `energy` mode.
  ENERGY

  # The fan is in `fresh` mode.
  FRESH

  # The fan is in `taste` mode.
  TASTE

  # The fan is on the `low` setting.
  LOW

  # The fan is on the `medium` setting.
  MEDIUM

  # The fan is on the `high` setting.
  HIGH
}

# Mutation input: The range of a thermostat in auto mode.
input ThermostatRangeInput {
  # The low temperature, in Celsius, to set on the device while in a TargetTemperatureRange mode (auto).
  setPointLow: Float!

  # The high temperature, in Celsius, to set on the device while in a TargetTemperatureRange mode (auto).
  setPointHigh: Float!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

type CreateActionResponse {
  # The device that was targeted by this action
  device: Device!

  # The transaction ID for this action
  transactionId: ID!

  # The ID for this action
  actionId: ID!
}

type User {
  id: ID!
  firstActivityAt: DateTime!
  lastActivityAt: DateTime!

  # All devices this user can access.
  devices(
    # Limit the paged response to a max number of items.
    first: Int = 10

    # Used to indicated where in the result set the paged response should start.
    after: String
    filter: DeviceFilterInput
    linkedAccountId: ID
  ): DeviceConnection!

  # Linked accounts
  linkedAccounts(
    # Limit the paged response to a max number of items.
    first: Int = 10

    # Used to indicated where in the result set the paged response should start.
    after: String
    id: ID
  ): LinkedAccountConnection!
}

# A filter that can be used to narrow device queries based on various criteria.
input DeviceFilterInput {
  # If provided, this query will only return devices that have at least one trait in the list.
  traits: [TraitName!]!
}

enum TraitName {
  # Functionality for devices that report their current battery level.
  BATTERY_LEVEL

  # (BETA) Functionality for devices that can be accessed via a card credential.
  BETA_CARD_CREDENTIAL

  # Functionality for devices that report their current firmware version.
  BETA_FIRMWARE

  # Devices that support different lighting effects.
  BETA_LIGHT_EFFECTS

  # Functionality for devices that detect and report noise.
  BETA_NOISE_DETECTED

  # Functionality for devices that can be accessed via a PIN code credential.
  BETA_PIN_CODE_CREDENTIALS

  # (BETA) Functionality for devices that can be automatically relocked.
  BETA_RELOCK

  # Functionality for devices that detect and report water leaks.
  BETA_WATER_PRESENT

  # Functionality for devices that can have their brightness adjusted.
  BRIGHTNESS

  # Functionality for devices that can be set to a specific color.
  COLOR

  # Describes a light appearance provided by a light bulb
  COLOR_TEMPERATURE

  # Functionality for devices that can be locked or unlocked.
  LOCK

  # Functionality for devices that can be accessed via a PIN code credential.
  PIN_CODE_CREDENTIAL

  # Functionality for devices that can be turned on or off.
  POWER

  # Functionality for devices that are used to control and monitor temperature.
  THERMOSTAT_SETTING
}

# A single edge from a connection to User nodes.
type UserEdge {
  cursor: String!
  node: User!
}

# A connection to a collection of User edges.
type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge!]!
}

# A 3rd party integration
type Integration {
  # 3rd party integration ID
  id: String!

  # 3rd party integration display name
  displayName: String!

  # Represents the health status of the integration
  health: IntegrationHealth!
}

enum IntegrationHealth {
  # Zero activity recorded, integration is idle.
  IDLE

  # Integration is in a healthy state
  OKAY

  # We have noticed problems with this integration
  DEGRADED

  # Failed to assess the state of the integration. This should not happen.
  UNKNOWN
}

# A single edge from a connection to Integration nodes.
type IntegrationEdge {
  cursor: String!
  node: Integration!
}

# A connection to a collection of Integration edges.
type IntegrationConnection {
  pageInfo: PageInfo!
  edges: [IntegrationEdge!]!
}

type LinkedAccount {
  # Linked account ID
  id: ID!

  # Datetime when account was first authorized
  createdAt: DateTime!
  devices(
    # Limit the paged response to a max number of items.
    first: Int = 10

    # Used to indicated where in the result set the paged response should start.
    after: String
    filter: DeviceFilterInput
    linkedAccountId: ID
  ): DeviceConnection!
  status: LinkedAccountAuthorizedStatus!
  integration: Integration!
}

enum LinkedAccountAuthorizedStatus {
  # The account is authorized
  AUTHORIZED

  # The account exists but is not authorized
  NOT_AUTHORIZED
}

# A single edge from a connection to LinkedAccount nodes.
type LinkedAccountEdge {
  cursor: String!
  node: LinkedAccount!
}

# A connection to a collection of LinkedAccount edges.
type LinkedAccountConnection {
  pageInfo: PageInfo!
  edges: [LinkedAccountEdge!]!
}

type GeneratedAccountLinkingUrl {
  # A single-use URL to kick-off an account linking instance.
  url: String!

  # The ID of the account that will be linked.
  linkedAccountId: String!

  # Timestamp when the account linking URL will expire
  expiresAt: DateTime!
  integration: Integration!
}

type GeneratedAccountRelinkingUrl {
  # A single-use URL to kick-off an account relinking instance.
  url: String!

  # The ID of the account that will be relinked.
  linkedAccountId: String!

  # Timestamp when the account relinking URL will expire
  expiresAt: DateTime!
  integration: Integration!
}

type RemoveLinkedAccountResponse {
  # The currently logged in user. This is the primary entry point into a user's data graph
  me: User!
}

type Tenant {
  id: ID!
  displayName: String!
}

interface DeviceEvent {
  # When this event occurred.
  createdAt: DateTime!
}

type DeviceActionCreatedEvent implements DeviceEvent {
  # When this event occurred.
  createdAt: DateTime!

  # The device ID that this action event relates to.
  deviceId: ID!

  # The user ID of the user that created the action.
  userId: ID!

  # The action ID of the action this event relates to.
  actionId: ID!
  traitName: TraitName!

  # The identifier for the specific trait instance this event targeted.
  traitInstance: String!

  # The parameters of the action.
  actionParameters: JSONObject!
}

# The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
scalar JSONObject

type DeviceActionUpdatedEvent implements DeviceEvent {
  # When this event occurred.
  createdAt: DateTime!

  # The device ID that this action event relates to.
  deviceId: ID!

  # The action ID of the action this event relates to.
  actionId: ID!
  traitName: TraitName!

  # The identifier for the specific trait instance this event targeted.
  traitInstance: String!

  # The status state that the action is in.
  status: DeviceActionStatus!
}

enum DeviceActionStatus {
  # the action has been queued for processing
  PENDING

  # the action has been resolved by the device
  RESOLVED

  # the action has been rejected by the device
  REJECTED

  # an internal issue with Yonomi has occurred
  ERROR

  # Yonomi has processed the action, but is unable to dispatch action to the device
  FAILED

  # timed out before action was resolved or rejected by the device
  TIMEOUT

  # a pending action was canceled due to a conflicting in-flight operation
  CANCELED
}

type DeviceStateUpdatedEvent implements DeviceEvent {
  # When this event occurred.
  createdAt: DateTime!
  deviceId: ID!
  traitName: TraitName!

  # The identifier for the specific trait instance this event targeted.
  traitInstance: String!

  # The state field being updated.
  fieldName: String!
  value: JSON

  # The actionId of the corresponding action.
  actionId: ID

  # When this event occurred.
  sampledAt: DateTime!
}

# The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
scalar JSON

type DeviceStateClearedEvent implements DeviceEvent {
  # When this event occurred.
  createdAt: DateTime!
  deviceId: ID!
  traitName: TraitName!

  # The identifier for the specific trait instance this event targeted.
  traitInstance: String!

  # The state field being updated.
  fieldName: String!
}

type DeviceConfiguredEvent implements DeviceEvent {
  # When this event occurred.
  createdAt: DateTime!
  deviceId: ID!
  traits: [JSONObject!]!
}

type DeviceNotificationReportedEvent implements DeviceEvent {
  # When this event occurred.
  createdAt: DateTime!
  deviceId: ID!

  # The name of the notification.
  notificationName: String!

  # The type of notification.
  notificationType: String!

  # The message template used when forming the notification message.
  messageTemplate: String!

  # The message communicated by the notification.
  messageComputed: String!

  # The evaluation context used when forming the notification message.
  evaluationContext: JSONObject

  # The error category of the notification.
  errorCategory: String

  # The error code of the notification.
  errorCode: String

  # The actionId of the corresponding action.
  actionId: ID
  traitName: TraitName!

  # The identifier for the specific trait instance this event targeted.
  traitInstance: String!

  # When this notification occurred.
  timestamp: DateTime!
}

# A single edge from a connection to DeviceEvent nodes.
type DeviceEventEdge {
  cursor: String!
  node: DeviceEvent!
}

# A connection to a collection of DeviceEvent edges.
type DeviceEventConnection {
  pageInfo: PageInfo!
  edges: [DeviceEventEdge!]!
}

type ProductInformation {
  # A description of this device.
  description: String!

  # The manufacturer of this device.
  manufacturer: String!

  # Model number or model name of this device.
  model: String!

  # Serial number of this device.
  serialNumber: String
}

type Device {
  id: ID!

  # The display name of this device.
  displayName: String!

  # Information about the hardware product
  productInformation: ProductInformation!

  # When this device was created.
  createdAt: DateTime!

  # When the trait configuration of this device was last updated. Does not include displayName or device product information such as serialNumber.
  updatedAt: DateTime!

  # All of the instances of the traits that this device implements.
  traits: [DeviceTrait!]!

  # All events for this device.
  events(
    # Limit the paged response to a max number of items.
    first: Int = 10

    # Used to indicated where in the result set the paged response should start.
    after: String
    filter: DeviceEventFilterInput
    sort: DeviceEventSortInput
  ): DeviceEventConnection!
}

# A filter that can be used to narrow event queries based on various criteria.
input DeviceEventFilterInput {
  # type of device events to return, such as a state updated event.
  eventType: DeviceEventTypeName

  # If provided, this query will only return events from before the timestamp.
  before: DateTime

  # If provided, this query will only return events from after the timestamp.
  after: DateTime

  # If provided, filter events by this trait instance.
  traitInstance: String

  # If provided, filter events by list of traits.
  traits: [TraitName!]
}

enum DeviceEventTypeName {
  # Event of type "action created"
  DEVICE_ACTION_CREATED

  # Event of type "action updated"
  DEVICE_ACTION_UPDATED

  # Event of type "state updated".
  DEVICE_STATE_UPDATED

  # Event of type "state cleared".
  DEVICE_STATE_CLEARED

  # Event of type "device configured".
  DEVICE_CONFIGURED

  # Event of type "notification reported"
  DEVICE_NOTIFICATION_REPORTED
}

# If provided, returned events will be sorted based on timestamp.
enum DeviceEventSortInput {
  # Order events by ascending timestamps.
  ASCENDING

  # Order events be descending timestamps.
  DESCENDING
}

# A single edge from a connection to Device nodes.
type DeviceEdge {
  cursor: String!
  node: Device!
}

# A connection to a collection of Device edges.
type DeviceConnection {
  pageInfo: PageInfo!
  edges: [DeviceEdge!]!
}

# *BETA API* Owner of the device.
type DeviceOwner {
  tenantId: String
  userId: String
}

# *BETA API* A device not associated with a 3rd party account.
type ClaimableDevice {
  deviceId: String!
  integrationId: String!
  owner: DeviceOwner
}

# Represents an inclusive range between two integers.
type IntRange {
  min: Int!
  max: Int!
}

# Represents an inclusive range between two floats.
type FloatRange {
  min: Float!
  max: Float!
}

# The base DeviceTrait interface.
interface DeviceTrait {
  # The name of this device trait.
  name: TraitName!

  # Devices can have multiple "instances" of a given trait. This property is used to differentiate those separate instances
  instance: String!

  # Whether this trait is in beta.
  isBeta: Boolean

  # The trait filtered events of this device.
  events(
    # Limit the paged response to a max number of items.
    first: Int = 10

    # Used to indicated where in the result set the paged response should start.
    after: String
    filter: TraitFilteredEventFilterInput
    sort: DeviceEventSortInput
  ): DeviceEventConnection!
}

# A filter that can be used to narrow event queries based on various criteria.
input TraitFilteredEventFilterInput {
  # Type of device events to return, such as a state updated event.
  eventType: DeviceEventTypeName

  # If provided, this query will only return events from before the timestamp.
  before: DateTime

  # If provided, this query will only return events from after the timestamp.
  after: DateTime
}

# The base trait reported state field interface.
interface ReportedStateField {
  # The DateTime that this reported state value was persisted to the platform.
  createdAt: DateTime!

  # The DateTime that this reported state value was sampled (recorded) by the device
  sampledAt: DateTime!
}

# The base trait desired state field interface.
interface DesiredStateField {
  # The datetime that this desired state value was most recently updated.
  updatedAt: DateTime!
}

# Encapsulates card credential data
type BetaCardCredential {
  # A card credential.
  credential: String!

  # A unique identifier (UUID) for the card credential.
  id: String!
}

# This represents a range of floating point numbers with min and max values that are dynamic.
type DynamicFloatRange {
  # The minimum floating point number value allowed.
  min: Float!

  # The maximum floating point number value allowed.
  max: Float!
}

# This represents a range of integers with min and max values that are dynamic.
type DynamicIntRange {
  # The minimum integer value allowed.
  min: Int!

  # The maximum integer value allowed.
  max: Int!
}

# Represents a color in terms of its hue, saturation, and brightness.
type HSBColorValue {
  # The value of the hue attribute for this color.
  h: Int!

  # The value of the saturation percentage attribute for this color.
  s: Int!

  # The absolute brightness percentage value for this color.
  b: Int!
}

# Notification that the lock has changed states.
type LockNotification {
  # What triggered the change in lock state.
  eventType: LockNotificationEventType

  # Whether the lock is locked after the auto relock
  isLocked: Boolean!
}

enum LockNotificationEventType {
  # The lock automatically locked after a preset delay.
  AUTO_RELOCK

  # A button on the lock was pressed.
  ONE_TOUCH_LOCKING

  # The lock was manually turned.
  THUMBTURN

  # An command was received from the cloud, such as from a mobile app.
  VIRTUAL_KEY
}

# Encapsulates PIN code credential data
type PinCodeCredential {
  # A PIN code. This is also the unique identifier for the PIN code credential data.
  pinCode: String!

  # A human-readable name for the PIN code credential data.
  name: String!

  # A set of schedules by which the device may be accessed via the PIN code credential.
  schedules: [RRuleSchedule!]!
}

# Encapsulates PIN code credential data
type PinCodeCredentialCreateItem {
  # A unique identifier to address this pin code credential.
  id: String!

  # A PIN code. This is also the unique identifier for the PIN code credential data.
  pinCode: String!

  # A human-readable name for the PIN code credential data.
  name: String!

  # Indicates that the PIN code credential should always permit access.
  alwaysActive: Boolean!

  # list of schedules that detail a repeated pattern when the PIN code credential should allow access.
  recurringSchedules: [RecurringSchedule!]!

  # A set of schedules that provide one-time access using this PIN code credential.
  temporarySchedules: [TemporarySchedule!]!
}

# Encapsulates PIN code credential data
type PinCodeCredentialItem {
  # A unique identifier to address this pin code credential.
  id: String!

  # A PIN code. This is also the unique identifier for the PIN code credential data.
  pinCode: String!

  # A human-readable name for the PIN code credential data.
  name: String!

  # Indicates that the PIN code credential should always permit access.
  alwaysActive: Boolean!

  # list of schedules that detail a repeated pattern when the PIN code credential should allow access.
  recurringSchedules: [RecurringSchedule!]!

  # A set of schedules that provide one-time access using this PIN code credential.
  temporarySchedules: [TemporarySchedule!]!
}

# Encapsulates PIN code credential data
type PinCodeCredentialListItem {
  # A PIN code. This is also the unique identifier for the PIN code credential data.
  pinCode: String!

  # A human-readable name for the PIN code credential data.
  name: String!

  # Indicates that the PIN code credential should always permit access.
  alwaysActive: Boolean!

  # list of schedules that detail a repeated pattern when the PIN code credential should allow access.
  recurringSchedules: [RecurringSchedule!]!

  # A set of schedules that provide one-time access using this PIN code credential.
  temporarySchedules: [TemporarySchedule!]!
}

# A schedule that repeats based on an RRULE recurrance pattern.
type RecurringSchedule {
  # The number of minutes the schedule should last for. Begins at every time specified by a recurrance rule.
  duration: Int!

  # Repetition rule that describes when the defined schedule repeats.
  rrule: RRuleSchedule!
}

# A schedule that grants access only within the start date-time and end date-time.
type TemporarySchedule {
  # The ISO 8601 compliant start date of the schedule.
  startDatetime: DateTime!

  # The ISO 8601 compliant end date of the schedule.
  endDatetime: DateTime!
}

# The range of a thermostat in auto mode.
type ThermostatRange {
  # The low temperature, in Celsius, to set on the device while in a TargetTemperatureRange mode (auto).
  setPointLow: Float!

  # The high temperature, in Celsius, to set on the device while in a TargetTemperatureRange mode (auto).
  setPointHigh: Float!
}

# Information about the reported BatteryLevel state for the percentage field.
type BatteryLevelStateReportedPercentage implements ReportedStateField {
  # The DateTime that this reported state value was persisted to the platform.
  createdAt: DateTime!

  # The DateTime that this reported state value was sampled (recorded) by the device
  sampledAt: DateTime!

  # Current battery level percentage of the device.
  value: Int!
}

# Information about the desired BatteryLevel state for the percentage field.
type BatteryLevelStateDesiredPercentage implements DesiredStateField {
  # The datetime that this desired state value was most recently updated.
  updatedAt: DateTime!

  # Current battery level percentage of the device.
  value: Int!

  # Current battery level percentage of the device.
  delta: Int
}

# Information about the BatteryLevel state for the percentage field
type BatteryLevelStatePercentageField {
  # The most recently reported state. May be null if the device has not yet reported it's state
  reported: BatteryLevelStateReportedPercentage

  # The device's desired state. May be null if the device has not yet reported it's state.
  desired: BatteryLevelStateDesiredPercentage
}

# Information about the reported BatteryLevel state for the status field.
type BatteryLevelStateReportedStatus implements ReportedStateField {
  # The DateTime that this reported state value was persisted to the platform.
  createdAt: DateTime!

  # The DateTime that this reported state value was sampled (recorded) by the device
  sampledAt: DateTime!

  # A qualitative description of the current battery level of the device.
  value: BatteryStatus
}

enum BatteryStatus {
  # The battery status has not been reported.
  UNKNOWN

  # The battery on this device is at a normal level of charge.
  NORMAL

  # The battery on this device is at a low level of charge.
  LOW

  # The battery on this device is at a critically low level of charge.
  CRITICAL
}

# Information about the desired BatteryLevel state for the status field.
type BatteryLevelStateDesiredStatus implements DesiredStateField {
  # The datetime that this desired state value was most recently updated.
  updatedAt: DateTime!

  # A qualitative description of the current battery level of the device.
  value: BatteryStatus

  # A qualitative description of the current battery level of the device.
  delta: BatteryStatus
}

# Information about the BatteryLevel state for the status field
type BatteryLevelStateStatusField {
  # The most recently reported state. May be null if the device has not yet reported it's state
  reported: BatteryLevelStateReportedStatus

  # The device's desired state. May be null if the device has not yet reported it's state.
  desired: BatteryLevelStateDesiredStatus
}

# The state information for the BatteryLevel trait
type BatteryLevelState {
  # Current battery level percentage of the device.
  percentage: BatteryLevelStatePercentageField!

  # A qualitative description of the current battery level of the device.
  status: BatteryLevelStateStatusField!
}

type BatteryLevelDeviceTrait implements DeviceTrait {
  # The name of this device trait.
  name: TraitName!

  # Devices can have multiple "instances" of a given trait. This property is used to differentiate those separate instances
  instance: String!

  # Whether this trait is in beta.
  isBeta: Boolean

  # The trait filtered events of this device.
  events(
    # Limit the paged response to a max number of items.
    first: Int = 10

    # Used to indicated where in the result set the paged response should start.
    after: String
    filter: TraitFilteredEventFilterInput
    sort: DeviceEventSortInput
  ): DeviceEventConnection!

  # The BatteryLevel state of this device.
  state: BatteryLevelState!
}

# A single edge from a connection to BetaCardCredential nodes.
type BetaCardCredentialEdge {
  cursor: String!
  node: BetaCardCredential!
}

# A connection to a collection of BetaCardCredential edges.
type BetaCardCredentialConnection {
  pageInfo: PageInfo!
  edges: [BetaCardCredentialEdge!]!
}

# Information about the reported BetaCardCredential state for the cardCredentials field.
type BetaCardCredentialStateReportedCardCredentials implements ReportedStateField {
  # The DateTime that this reported state value was persisted to the platform.
  createdAt: DateTime!

  # The DateTime that this reported state value was sampled (recorded) by the device
  sampledAt: DateTime!

  # Current list of card credentials that have been granted access to the device.
  value(
    # Limit the paged response to a max number of items.
    first: Int = 10

    # Used to indicated where in the result set the paged response should start.
    after: String
  ): BetaCardCredentialConnection!
}

# Information about the desired BetaCardCredential state for the cardCredentials field.
type BetaCardCredentialStateDesiredCardCredentials implements DesiredStateField {
  # The datetime that this desired state value was most recently updated.
  updatedAt: DateTime!

  # Current list of card credentials that have been granted access to the device.
  value(
    # Limit the paged response to a max number of items.
    first: Int = 10

    # Used to indicated where in the result set the paged response should start.
    after: String
  ): BetaCardCredentialConnection!

  # Current list of card credentials that have been granted access to the device.
  delta(
    # Limit the paged response to a max number of items.
    first: Int = 10

    # Used to indicated where in the result set the paged response should start.
    after: String
  ): BetaCardCredentialConnection
}

# Information about the BetaCardCredential state for the cardCredentials field
type BetaCardCredentialStateCardCredentialsField {
  # The most recently reported state. May be null if the device has not yet reported it's state
  reported: BetaCardCredentialStateReportedCardCredentials

  # The device's desired state. May be null if the device has not yet reported it's state.
  desired: BetaCardCredentialStateDesiredCardCredentials
}

# The state information for the BetaCardCredential trait
type BetaCardCredentialState {
  # Current list of card credentials that have been granted access to the device.
  cardCredentials: BetaCardCredentialStateCardCredentialsField!
}

# The properties (trait configuration) payload for the BetaCardCredential trait
type BetaCardCredentialProperties {
  # The maximum number of card credentials that may be registered on a device.
  #
  maxNumberOfCardCredentials: Int
}

type BetaCardCredentialDeviceTrait implements DeviceTrait {
  # The name of this device trait.
  name: TraitName!

  # Devices can have multiple "instances" of a given trait. This property is used to differentiate those separate instances
  instance: String!

  # Whether this trait is in beta.
  isBeta: Boolean

  # The trait filtered events of this device.
  events(
    # Limit the paged response to a max number of items.
    first: Int = 10

    # Used to indicated where in the result set the paged response should start.
    after: String
    filter: TraitFilteredEventFilterInput
    sort: DeviceEventSortInput
  ): DeviceEventConnection!

  # The BetaCardCredential configuration for this device.
  properties: BetaCardCredentialProperties!

  # The BetaCardCredential state of this device.
  state: BetaCardCredentialState!
}

# Information about the reported BetaFirmware state for the version field.
type BetaFirmwareStateReportedVersion implements ReportedStateField {
  # The DateTime that this reported state value was persisted to the platform.
  createdAt: DateTime!

  # The DateTime that this reported state value was sampled (recorded) by the device
  sampledAt: DateTime!

  # Current firmware version of the device.
  value: String
}

# Information about the desired BetaFirmware state for the version field.
type BetaFirmwareStateDesiredVersion implements DesiredStateField {
  # The datetime that this desired state value was most recently updated.
  updatedAt: DateTime!

  # Current firmware version of the device.
  value: String

  # Current firmware version of the device.
  delta: String
}

# Information about the BetaFirmware state for the version field
type BetaFirmwareStateVersionField {
  # The most recently reported state. May be null if the device has not yet reported it's state
  reported: BetaFirmwareStateReportedVersion

  # The device's desired state. May be null if the device has not yet reported it's state.
  desired: BetaFirmwareStateDesiredVersion
}

# Information about the reported BetaFirmware state for the lastUpdated field.
type BetaFirmwareStateReportedLastUpdated implements ReportedStateField {
  # The DateTime that this reported state value was persisted to the platform.
  createdAt: DateTime!

  # The DateTime that this reported state value was sampled (recorded) by the device
  sampledAt: DateTime!

  # The time that the device's firmware was reported as updated to the cloud.
  value: DateTime
}

# Information about the desired BetaFirmware state for the lastUpdated field.
type BetaFirmwareStateDesiredLastUpdated implements DesiredStateField {
  # The datetime that this desired state value was most recently updated.
  updatedAt: DateTime!

  # The time that the device's firmware was reported as updated to the cloud.
  value: DateTime

  # The time that the device's firmware was reported as updated to the cloud.
  delta: DateTime
}

# Information about the BetaFirmware state for the lastUpdated field
type BetaFirmwareStateLastUpdatedField {
  # The most recently reported state. May be null if the device has not yet reported it's state
  reported: BetaFirmwareStateReportedLastUpdated

  # The device's desired state. May be null if the device has not yet reported it's state.
  desired: BetaFirmwareStateDesiredLastUpdated
}

# Information about the reported BetaFirmware state for the installScheduledAt field.
type BetaFirmwareStateReportedInstallScheduledAt implements ReportedStateField {
  # The DateTime that this reported state value was persisted to the platform.
  createdAt: DateTime!

  # The DateTime that this reported state value was sampled (recorded) by the device
  sampledAt: DateTime!

  # The time that the device's firmware was scheduled to be installed.
  value: DateTime
}

# Information about the desired BetaFirmware state for the installScheduledAt field.
type BetaFirmwareStateDesiredInstallScheduledAt implements DesiredStateField {
  # The datetime that this desired state value was most recently updated.
  updatedAt: DateTime!

  # The time that the device's firmware was scheduled to be installed.
  value: DateTime

  # The time that the device's firmware was scheduled to be installed.
  delta: DateTime
}

# Information about the BetaFirmware state for the installScheduledAt field
type BetaFirmwareStateInstallScheduledAtField {
  # The most recently reported state. May be null if the device has not yet reported it's state
  reported: BetaFirmwareStateReportedInstallScheduledAt

  # The device's desired state. May be null if the device has not yet reported it's state.
  desired: BetaFirmwareStateDesiredInstallScheduledAt
}

# Information about the reported BetaFirmware state for the installedAt field.
type BetaFirmwareStateReportedInstalledAt implements ReportedStateField {
  # The DateTime that this reported state value was persisted to the platform.
  createdAt: DateTime!

  # The DateTime that this reported state value was sampled (recorded) by the device
  sampledAt: DateTime!

  # The time that the device's firmware was installed.
  value: DateTime
}

# Information about the desired BetaFirmware state for the installedAt field.
type BetaFirmwareStateDesiredInstalledAt implements DesiredStateField {
  # The datetime that this desired state value was most recently updated.
  updatedAt: DateTime!

  # The time that the device's firmware was installed.
  value: DateTime

  # The time that the device's firmware was installed.
  delta: DateTime
}

# Information about the BetaFirmware state for the installedAt field
type BetaFirmwareStateInstalledAtField {
  # The most recently reported state. May be null if the device has not yet reported it's state
  reported: BetaFirmwareStateReportedInstalledAt

  # The device's desired state. May be null if the device has not yet reported it's state.
  desired: BetaFirmwareStateDesiredInstalledAt
}

# Information about the reported BetaFirmware state for the downloadScheduledAt field.
type BetaFirmwareStateReportedDownloadScheduledAt implements ReportedStateField {
  # The DateTime that this reported state value was persisted to the platform.
  createdAt: DateTime!

  # The DateTime that this reported state value was sampled (recorded) by the device
  sampledAt: DateTime!

  # The time that the device's firmware was scheduled to be downloaded.
  value: DateTime
}

# Information about the desired BetaFirmware state for the downloadScheduledAt field.
type BetaFirmwareStateDesiredDownloadScheduledAt implements DesiredStateField {
  # The datetime that this desired state value was most recently updated.
  updatedAt: DateTime!

  # The time that the device's firmware was scheduled to be downloaded.
  value: DateTime

  # The time that the device's firmware was scheduled to be downloaded.
  delta: DateTime
}

# Information about the BetaFirmware state for the downloadScheduledAt field
type BetaFirmwareStateDownloadScheduledAtField {
  # The most recently reported state. May be null if the device has not yet reported it's state
  reported: BetaFirmwareStateReportedDownloadScheduledAt

  # The device's desired state. May be null if the device has not yet reported it's state.
  desired: BetaFirmwareStateDesiredDownloadScheduledAt
}

# The state information for the BetaFirmware trait
type BetaFirmwareState {
  # Current firmware version of the device.
  version: BetaFirmwareStateVersionField!

  # The time that the device's firmware was reported as updated to the cloud.
  lastUpdated: BetaFirmwareStateLastUpdatedField!

  # The time that the device's firmware was scheduled to be installed.
  installScheduledAt: BetaFirmwareStateInstallScheduledAtField!

  # The time that the device's firmware was installed.
  installedAt: BetaFirmwareStateInstalledAtField!

  # The time that the device's firmware was scheduled to be downloaded.
  downloadScheduledAt: BetaFirmwareStateDownloadScheduledAtField!
}

type BetaFirmwareDeviceTrait implements DeviceTrait {
  # The name of this device trait.
  name: TraitName!

  # Devices can have multiple "instances" of a given trait. This property is used to differentiate those separate instances
  instance: String!

  # Whether this trait is in beta.
  isBeta: Boolean

  # The trait filtered events of this device.
  events(
    # Limit the paged response to a max number of items.
    first: Int = 10

    # Used to indicated where in the result set the paged response should start.
    after: String
    filter: TraitFilteredEventFilterInput
    sort: DeviceEventSortInput
  ): DeviceEventConnection!

  # The BetaFirmware state of this device.
  state: BetaFirmwareState!
}

# The properties (trait configuration) payload for the BetaLightEffects trait
type BetaLightEffectsProperties {
  # The allowed range that the device supports for color temperature in Kelvin
  supportedColorTemperatureRange: IntRange

  # The light effects that this device supports.
  supportedLightEffects: [LightEffects!]

  # The range of values in milliseconds that the transition period can be set to.
  supportedTransitionPeriodRange: IntRange
}

enum LightEffects {
  # The device can change it's brightness over a transition period.
  BRIGHTNESS_WITH_TRANSITION

  # The device can change it's color over a transition period.
  COLOR_WITH_TRANSITION

  # The device can change it's color temperature over a transition period.
  COLOR_TEMP_WITH_TRANSITION
}

type BetaLightEffectsDeviceTrait implements DeviceTrait {
  # The name of this device trait.
  name: TraitName!

  # Devices can have multiple "instances" of a given trait. This property is used to differentiate those separate instances
  instance: String!

  # Whether this trait is in beta.
  isBeta: Boolean

  # The trait filtered events of this device.
  events(
    # Limit the paged response to a max number of items.
    first: Int = 10

    # Used to indicated where in the result set the paged response should start.
    after: String
    filter: TraitFilteredEventFilterInput
    sort: DeviceEventSortInput
  ): DeviceEventConnection!

  # The BetaLightEffects configuration for this device.
  properties: BetaLightEffectsProperties!
}

type BetaNoiseDetectedDeviceTrait implements DeviceTrait {
  # The name of this device trait.
  name: TraitName!

  # Devices can have multiple "instances" of a given trait. This property is used to differentiate those separate instances
  instance: String!

  # Whether this trait is in beta.
  isBeta: Boolean

  # The trait filtered events of this device.
  events(
    # Limit the paged response to a max number of items.
    first: Int = 10

    # Used to indicated where in the result set the paged response should start.
    after: String
    filter: TraitFilteredEventFilterInput
    sort: DeviceEventSortInput
  ): DeviceEventConnection!
}

# A single edge from a connection to PinCodeCredentialItem nodes.
type PinCodeCredentialItemEdge {
  cursor: String!
  node: PinCodeCredentialItem!
}

# A connection to a collection of PinCodeCredentialItem edges.
type PinCodeCredentialItemConnection {
  pageInfo: PageInfo!
  edges: [PinCodeCredentialItemEdge!]!
}

# Information about the reported BetaPinCodeCredentials state for the pinCodeCredentials field.
type BetaPinCodeCredentialsStateReportedPinCodeCredentials implements ReportedStateField {
  # The DateTime that this reported state value was persisted to the platform.
  createdAt: DateTime!

  # The DateTime that this reported state value was sampled (recorded) by the device
  sampledAt: DateTime!

  # Current list of PIN code credentials that have been granted access to the device.
  value(
    # Limit the paged response to a max number of items.
    first: Int = 10

    # Used to indicated where in the result set the paged response should start.
    after: String
  ): PinCodeCredentialItemConnection!
}

# Information about the desired BetaPinCodeCredentials state for the pinCodeCredentials field.
type BetaPinCodeCredentialsStateDesiredPinCodeCredentials implements DesiredStateField {
  # The datetime that this desired state value was most recently updated.
  updatedAt: DateTime!

  # Current list of PIN code credentials that have been granted access to the device.
  value(
    # Limit the paged response to a max number of items.
    first: Int = 10

    # Used to indicated where in the result set the paged response should start.
    after: String
  ): PinCodeCredentialItemConnection!

  # Current list of PIN code credentials that have been granted access to the device.
  delta(
    # Limit the paged response to a max number of items.
    first: Int = 10

    # Used to indicated where in the result set the paged response should start.
    after: String
  ): PinCodeCredentialItemConnection
}

# Information about the BetaPinCodeCredentials state for the pinCodeCredentials field
type BetaPinCodeCredentialsStatePinCodeCredentialsField {
  # The most recently reported state. May be null if the device has not yet reported it's state
  reported: BetaPinCodeCredentialsStateReportedPinCodeCredentials

  # The device's desired state. May be null if the device has not yet reported it's state.
  desired: BetaPinCodeCredentialsStateDesiredPinCodeCredentials
}

# The state information for the BetaPinCodeCredentials trait
type BetaPinCodeCredentialsState {
  # Current list of PIN code credentials that have been granted access to the device.
  pinCodeCredentials: BetaPinCodeCredentialsStatePinCodeCredentialsField!
}

# The properties (trait configuration) payload for the BetaPinCodeCredentials trait
type BetaPinCodeCredentialsProperties {
  # The maximum number of PIN code credentials that may be registered on a device.
  #
  maxNumberOfPinCodeCredentials: Int

  # The maximum number of schedules that may be included on a PIN code credential.
  #
  maxNumberOfSchedulesPerPinCodeCredential: Int

  # The allowed number of characters in a name for this device's PIN code credentials.
  #
  supportedPinCodeCredentialNameRange: IntRange

  # The allowed number of digits in a PIN code for this device's PIN code credentials.
  #
  supportedPinCodeRange: IntRange

  # The maximum number of recurring schedules that may be included on a PIN code credential.
  #
  maxNumberOfRecurringSchedulesPerPinCodeCredential: Int

  # The maximum number of temporary schedules that may be included on a PIN code credential.
  #
  maxNumberOfTemporarySchedulesPerPinCodeCredential: Int

  # If this is set, temporary and recurring schedules cannot be mixed on a PIN code credential.
  #
  exclusiveSchedules: Boolean
}

type BetaPinCodeCredentialsDeviceTrait implements DeviceTrait {
  # The name of this device trait.
  name: TraitName!

  # Devices can have multiple "instances" of a given trait. This property is used to differentiate those separate instances
  instance: String!

  # Whether this trait is in beta.
  isBeta: Boolean

  # The trait filtered events of this device.
  events(
    # Limit the paged response to a max number of items.
    first: Int = 10

    # Used to indicated where in the result set the paged response should start.
    after: String
    filter: TraitFilteredEventFilterInput
    sort: DeviceEventSortInput
  ): DeviceEventConnection!

  # The BetaPinCodeCredentials configuration for this device.
  properties: BetaPinCodeCredentialsProperties!

  # The BetaPinCodeCredentials state of this device.
  state: BetaPinCodeCredentialsState!
}

# Information about the reported BetaRelock state for the relockDelay field.
type BetaRelockStateReportedRelockDelay implements ReportedStateField {
  # The DateTime that this reported state value was persisted to the platform.
  createdAt: DateTime!

  # The DateTime that this reported state value was sampled (recorded) by the device
  sampledAt: DateTime!

  # Time in seconds before the device automatically locks itself.
  value: Int!
}

# Information about the desired BetaRelock state for the relockDelay field.
type BetaRelockStateDesiredRelockDelay implements DesiredStateField {
  # The datetime that this desired state value was most recently updated.
  updatedAt: DateTime!

  # Time in seconds before the device automatically locks itself.
  value: Int!

  # Time in seconds before the device automatically locks itself.
  delta: Int
}

# Information about the BetaRelock state for the relockDelay field
type BetaRelockStateRelockDelayField {
  # The most recently reported state. May be null if the device has not yet reported it's state
  reported: BetaRelockStateReportedRelockDelay

  # The device's desired state. May be null if the device has not yet reported it's state.
  desired: BetaRelockStateDesiredRelockDelay
}

# The state information for the BetaRelock trait
type BetaRelockState {
  # Time in seconds before the device automatically locks itself.
  relockDelay: BetaRelockStateRelockDelayField!
}

# The properties (trait configuration) payload for the BetaRelock trait
type BetaRelockProperties {
  # Optional range in seconds that relock can be configured within.
  relockDelayValidRange: DynamicIntRange
}

type BetaRelockDeviceTrait implements DeviceTrait {
  # The name of this device trait.
  name: TraitName!

  # Devices can have multiple "instances" of a given trait. This property is used to differentiate those separate instances
  instance: String!

  # Whether this trait is in beta.
  isBeta: Boolean

  # The trait filtered events of this device.
  events(
    # Limit the paged response to a max number of items.
    first: Int = 10

    # Used to indicated where in the result set the paged response should start.
    after: String
    filter: TraitFilteredEventFilterInput
    sort: DeviceEventSortInput
  ): DeviceEventConnection!

  # The BetaRelock configuration for this device.
  properties: BetaRelockProperties!

  # The BetaRelock state of this device.
  state: BetaRelockState!
}

# Information about the reported BetaWaterPresent state for the waterPresent field.
type BetaWaterPresentStateReportedWaterPresent implements ReportedStateField {
  # The DateTime that this reported state value was persisted to the platform.
  createdAt: DateTime!

  # The DateTime that this reported state value was sampled (recorded) by the device
  sampledAt: DateTime!

  # Current status of whether or not water is detected by the device.
  value: Boolean!
}

# Information about the desired BetaWaterPresent state for the waterPresent field.
type BetaWaterPresentStateDesiredWaterPresent implements DesiredStateField {
  # The datetime that this desired state value was most recently updated.
  updatedAt: DateTime!

  # Current status of whether or not water is detected by the device.
  value: Boolean!

  # Current status of whether or not water is detected by the device.
  delta: Boolean
}

# Information about the BetaWaterPresent state for the waterPresent field
type BetaWaterPresentStateWaterPresentField {
  # The most recently reported state. May be null if the device has not yet reported it's state
  reported: BetaWaterPresentStateReportedWaterPresent

  # The device's desired state. May be null if the device has not yet reported it's state.
  desired: BetaWaterPresentStateDesiredWaterPresent
}

# The state information for the BetaWaterPresent trait
type BetaWaterPresentState {
  # Current status of whether or not water is detected by the device.
  waterPresent: BetaWaterPresentStateWaterPresentField!
}

type BetaWaterPresentDeviceTrait implements DeviceTrait {
  # The name of this device trait.
  name: TraitName!

  # Devices can have multiple "instances" of a given trait. This property is used to differentiate those separate instances
  instance: String!

  # Whether this trait is in beta.
  isBeta: Boolean

  # The trait filtered events of this device.
  events(
    # Limit the paged response to a max number of items.
    first: Int = 10

    # Used to indicated where in the result set the paged response should start.
    after: String
    filter: TraitFilteredEventFilterInput
    sort: DeviceEventSortInput
  ): DeviceEventConnection!

  # The BetaWaterPresent state of this device.
  state: BetaWaterPresentState!
}

# Information about the reported Brightness state for the brightness field.
type BrightnessStateReportedBrightness implements ReportedStateField {
  # The DateTime that this reported state value was persisted to the platform.
  createdAt: DateTime!

  # The DateTime that this reported state value was sampled (recorded) by the device
  sampledAt: DateTime!

  # Current absolute brightness level of this device.
  value: Int!
}

# Information about the desired Brightness state for the brightness field.
type BrightnessStateDesiredBrightness implements DesiredStateField {
  # The datetime that this desired state value was most recently updated.
  updatedAt: DateTime!

  # Current absolute brightness level of this device.
  value: Int!

  # Current absolute brightness level of this device.
  delta: Int
}

# Information about the Brightness state for the brightness field
type BrightnessStateBrightnessField {
  # The most recently reported state. May be null if the device has not yet reported it's state
  reported: BrightnessStateReportedBrightness

  # The device's desired state. May be null if the device has not yet reported it's state.
  desired: BrightnessStateDesiredBrightness
}

# The state information for the Brightness trait
type BrightnessState {
  # Current absolute brightness level of this device.
  brightness: BrightnessStateBrightnessField!
}

type BrightnessDeviceTrait implements DeviceTrait {
  # The name of this device trait.
  name: TraitName!

  # Devices can have multiple "instances" of a given trait. This property is used to differentiate those separate instances
  instance: String!

  # Whether this trait is in beta.
  isBeta: Boolean

  # The trait filtered events of this device.
  events(
    # Limit the paged response to a max number of items.
    first: Int = 10

    # Used to indicated where in the result set the paged response should start.
    after: String
    filter: TraitFilteredEventFilterInput
    sort: DeviceEventSortInput
  ): DeviceEventConnection!

  # The Brightness state of this device.
  state: BrightnessState!
}

# Information about the reported Color state for the color field.
type ColorStateReportedColor implements ReportedStateField {
  # The DateTime that this reported state value was persisted to the platform.
  createdAt: DateTime!

  # The DateTime that this reported state value was sampled (recorded) by the device
  sampledAt: DateTime!

  # Current HSB color of this device.
  value: HSBColorValue!
}

# Information about the desired Color state for the color field.
type ColorStateDesiredColor implements DesiredStateField {
  # The datetime that this desired state value was most recently updated.
  updatedAt: DateTime!

  # Current HSB color of this device.
  value: HSBColorValue!

  # Current HSB color of this device.
  delta: HSBColorValue
}

# Information about the Color state for the color field
type ColorStateColorField {
  # The most recently reported state. May be null if the device has not yet reported it's state
  reported: ColorStateReportedColor

  # The device's desired state. May be null if the device has not yet reported it's state.
  desired: ColorStateDesiredColor
}

# The state information for the Color trait
type ColorState {
  # Current HSB color of this device.
  color: ColorStateColorField!
}

type ColorDeviceTrait implements DeviceTrait {
  # The name of this device trait.
  name: TraitName!

  # Devices can have multiple "instances" of a given trait. This property is used to differentiate those separate instances
  instance: String!

  # Whether this trait is in beta.
  isBeta: Boolean

  # The trait filtered events of this device.
  events(
    # Limit the paged response to a max number of items.
    first: Int = 10

    # Used to indicated where in the result set the paged response should start.
    after: String
    filter: TraitFilteredEventFilterInput
    sort: DeviceEventSortInput
  ): DeviceEventConnection!

  # The Color state of this device.
  state: ColorState!
}

# Information about the reported ColorTemperature state for the colorTemperature field.
type ColorTemperatureStateReportedColorTemperature implements ReportedStateField {
  # The DateTime that this reported state value was persisted to the platform.
  createdAt: DateTime!

  # The DateTime that this reported state value was sampled (recorded) by the device
  sampledAt: DateTime!

  # Current color temperature of the device in Kelvin.
  value: Int!
}

# Information about the desired ColorTemperature state for the colorTemperature field.
type ColorTemperatureStateDesiredColorTemperature implements DesiredStateField {
  # The datetime that this desired state value was most recently updated.
  updatedAt: DateTime!

  # Current color temperature of the device in Kelvin.
  value: Int!

  # Current color temperature of the device in Kelvin.
  delta: Int
}

# Information about the ColorTemperature state for the colorTemperature field
type ColorTemperatureStateColorTemperatureField {
  # The most recently reported state. May be null if the device has not yet reported it's state
  reported: ColorTemperatureStateReportedColorTemperature

  # The device's desired state. May be null if the device has not yet reported it's state.
  desired: ColorTemperatureStateDesiredColorTemperature
}

# The state information for the ColorTemperature trait
type ColorTemperatureState {
  # Current color temperature of the device in Kelvin.
  colorTemperature: ColorTemperatureStateColorTemperatureField!
}

# The properties (trait configuration) payload for the ColorTemperature trait
type ColorTemperatureProperties {
  # The allowed range that the device supports for color temperature in Kelvin
  supportedColorTemperatureRange: IntRange
}

type ColorTemperatureDeviceTrait implements DeviceTrait {
  # The name of this device trait.
  name: TraitName!

  # Devices can have multiple "instances" of a given trait. This property is used to differentiate those separate instances
  instance: String!

  # Whether this trait is in beta.
  isBeta: Boolean

  # The trait filtered events of this device.
  events(
    # Limit the paged response to a max number of items.
    first: Int = 10

    # Used to indicated where in the result set the paged response should start.
    after: String
    filter: TraitFilteredEventFilterInput
    sort: DeviceEventSortInput
  ): DeviceEventConnection!

  # The ColorTemperature configuration for this device.
  properties: ColorTemperatureProperties!

  # The ColorTemperature state of this device.
  state: ColorTemperatureState!
}

# Information about the reported Lock state for the isLocked field.
type LockStateReportedIsLocked implements ReportedStateField {
  # The DateTime that this reported state value was persisted to the platform.
  createdAt: DateTime!

  # The DateTime that this reported state value was sampled (recorded) by the device
  sampledAt: DateTime!

  # Indicates whether the device is currently locked.
  value: Boolean!
}

# Information about the desired Lock state for the isLocked field.
type LockStateDesiredIsLocked implements DesiredStateField {
  # The datetime that this desired state value was most recently updated.
  updatedAt: DateTime!

  # Indicates whether the device is currently locked.
  value: Boolean!

  # Indicates whether the device is currently locked.
  delta: Boolean
}

# Information about the Lock state for the isLocked field
type LockStateIsLockedField {
  # The most recently reported state. May be null if the device has not yet reported it's state
  reported: LockStateReportedIsLocked

  # The device's desired state. May be null if the device has not yet reported it's state.
  desired: LockStateDesiredIsLocked
}

# Information about the reported Lock state for the isJammed field.
type LockStateReportedIsJammed implements ReportedStateField {
  # The DateTime that this reported state value was persisted to the platform.
  createdAt: DateTime!

  # The DateTime that this reported state value was sampled (recorded) by the device
  sampledAt: DateTime!

  # Indicates whether the device is currently jammed, hence the locked status couldn’t be determined.
  value: Boolean!
}

# Information about the desired Lock state for the isJammed field.
type LockStateDesiredIsJammed implements DesiredStateField {
  # The datetime that this desired state value was most recently updated.
  updatedAt: DateTime!

  # Indicates whether the device is currently jammed, hence the locked status couldn’t be determined.
  value: Boolean!

  # Indicates whether the device is currently jammed, hence the locked status couldn’t be determined.
  delta: Boolean
}

# Information about the Lock state for the isJammed field
type LockStateIsJammedField {
  # The most recently reported state. May be null if the device has not yet reported it's state
  reported: LockStateReportedIsJammed

  # The device's desired state. May be null if the device has not yet reported it's state.
  desired: LockStateDesiredIsJammed
}

# The state information for the Lock trait
type LockState {
  # Indicates whether the device is currently locked.
  isLocked: LockStateIsLockedField!

  # Indicates whether the device is currently jammed, hence the locked status couldn’t be determined.
  isJammed: LockStateIsJammedField!
}

# The properties (trait configuration) payload for the Lock trait
type LockProperties {
  # Indicates if the lock supports reporting its state as jammed implying that its lock status cannot be determined.
  supportsIsJammed: Boolean
}

type LockDeviceTrait implements DeviceTrait {
  # The name of this device trait.
  name: TraitName!

  # Devices can have multiple "instances" of a given trait. This property is used to differentiate those separate instances
  instance: String!

  # Whether this trait is in beta.
  isBeta: Boolean

  # The trait filtered events of this device.
  events(
    # Limit the paged response to a max number of items.
    first: Int = 10

    # Used to indicated where in the result set the paged response should start.
    after: String
    filter: TraitFilteredEventFilterInput
    sort: DeviceEventSortInput
  ): DeviceEventConnection!

  # The Lock configuration for this device.
  properties: LockProperties!

  # The Lock state of this device.
  state: LockState!
}

# A single edge from a connection to PinCodeCredential nodes.
type PinCodeCredentialEdge {
  cursor: String!
  node: PinCodeCredential!
}

# A connection to a collection of PinCodeCredential edges.
type PinCodeCredentialConnection {
  pageInfo: PageInfo!
  edges: [PinCodeCredentialEdge!]!
}

# Information about the reported PinCodeCredential state for the pinCodeCredentials field.
type PinCodeCredentialStateReportedPinCodeCredentials implements ReportedStateField {
  # The DateTime that this reported state value was persisted to the platform.
  createdAt: DateTime!

  # The DateTime that this reported state value was sampled (recorded) by the device
  sampledAt: DateTime!

  # Current list of PIN code credentials that have been granted access to the device.
  value(
    # Limit the paged response to a max number of items.
    first: Int = 10

    # Used to indicated where in the result set the paged response should start.
    after: String
  ): PinCodeCredentialConnection!
}

# Information about the desired PinCodeCredential state for the pinCodeCredentials field.
type PinCodeCredentialStateDesiredPinCodeCredentials implements DesiredStateField {
  # The datetime that this desired state value was most recently updated.
  updatedAt: DateTime!

  # Current list of PIN code credentials that have been granted access to the device.
  value(
    # Limit the paged response to a max number of items.
    first: Int = 10

    # Used to indicated where in the result set the paged response should start.
    after: String
  ): PinCodeCredentialConnection!

  # Current list of PIN code credentials that have been granted access to the device.
  delta(
    # Limit the paged response to a max number of items.
    first: Int = 10

    # Used to indicated where in the result set the paged response should start.
    after: String
  ): PinCodeCredentialConnection
}

# Information about the PinCodeCredential state for the pinCodeCredentials field
type PinCodeCredentialStatePinCodeCredentialsField {
  # The most recently reported state. May be null if the device has not yet reported it's state
  reported: PinCodeCredentialStateReportedPinCodeCredentials

  # The device's desired state. May be null if the device has not yet reported it's state.
  desired: PinCodeCredentialStateDesiredPinCodeCredentials
}

# A single edge from a connection to PinCodeCredentialListItem nodes.
type PinCodeCredentialListItemEdge {
  cursor: String!
  node: PinCodeCredentialListItem!
}

# A connection to a collection of PinCodeCredentialListItem edges.
type PinCodeCredentialListItemConnection {
  pageInfo: PageInfo!
  edges: [PinCodeCredentialListItemEdge!]!
}

# Information about the reported PinCodeCredential state for the pinCodeCredentialList field.
type PinCodeCredentialStateReportedPinCodeCredentialList implements ReportedStateField {
  # The DateTime that this reported state value was persisted to the platform.
  createdAt: DateTime!

  # The DateTime that this reported state value was sampled (recorded) by the device
  sampledAt: DateTime!

  # Current list of PIN code credentials that have been granted access to the device.
  value(
    # Limit the paged response to a max number of items.
    first: Int = 10

    # Used to indicated where in the result set the paged response should start.
    after: String
  ): PinCodeCredentialListItemConnection!
}

# Information about the desired PinCodeCredential state for the pinCodeCredentialList field.
type PinCodeCredentialStateDesiredPinCodeCredentialList implements DesiredStateField {
  # The datetime that this desired state value was most recently updated.
  updatedAt: DateTime!

  # Current list of PIN code credentials that have been granted access to the device.
  value(
    # Limit the paged response to a max number of items.
    first: Int = 10

    # Used to indicated where in the result set the paged response should start.
    after: String
  ): PinCodeCredentialListItemConnection!

  # Current list of PIN code credentials that have been granted access to the device.
  delta(
    # Limit the paged response to a max number of items.
    first: Int = 10

    # Used to indicated where in the result set the paged response should start.
    after: String
  ): PinCodeCredentialListItemConnection
}

# Information about the PinCodeCredential state for the pinCodeCredentialList field
type PinCodeCredentialStatePinCodeCredentialListField {
  # The most recently reported state. May be null if the device has not yet reported it's state
  reported: PinCodeCredentialStateReportedPinCodeCredentialList

  # The device's desired state. May be null if the device has not yet reported it's state.
  desired: PinCodeCredentialStateDesiredPinCodeCredentialList
}

# The state information for the PinCodeCredential trait
type PinCodeCredentialState {
  # Current list of PIN code credentials that have been granted access to the device.
  pinCodeCredentials: PinCodeCredentialStatePinCodeCredentialsField!

  # Current list of PIN code credentials that have been granted access to the device.
  pinCodeCredentialList: PinCodeCredentialStatePinCodeCredentialListField!
}

# The properties (trait configuration) payload for the PinCodeCredential trait
type PinCodeCredentialProperties {
  # The maximum number of PIN code credentials that may be registered on a device.
  #
  maxNumberOfPinCodeCredentials: Int

  # The maximum number of schedules that may be included on a PIN code credential.
  #
  maxNumberOfSchedulesPerPinCodeCredential: Int

  # The allowed number of characters in a name for this device's PIN code credentials.
  #
  supportedPinCodeCredentialNameRange: IntRange

  # The allowed number of digits in a PIN code for this device's PIN code credentials.
  #
  supportedPinCodeRange: IntRange

  # The maximum number of recurring schedules that may be included on a PIN code credential.
  #
  maxNumberOfRecurringSchedulesPerPinCodeCredential: Int

  # The maximum number of temporary schedules that may be included on a PIN code credential.
  #
  maxNumberOfTemporarySchedulesPerPinCodeCredential: Int

  # If this is set, temporary and recurring schedules cannot be mixed on a PIN code credential.
  #
  exclusiveSchedules: Boolean
}

type PinCodeCredentialDeviceTrait implements DeviceTrait {
  # The name of this device trait.
  name: TraitName!

  # Devices can have multiple "instances" of a given trait. This property is used to differentiate those separate instances
  instance: String!

  # Whether this trait is in beta.
  isBeta: Boolean

  # The trait filtered events of this device.
  events(
    # Limit the paged response to a max number of items.
    first: Int = 10

    # Used to indicated where in the result set the paged response should start.
    after: String
    filter: TraitFilteredEventFilterInput
    sort: DeviceEventSortInput
  ): DeviceEventConnection!

  # The PinCodeCredential configuration for this device.
  properties: PinCodeCredentialProperties!

  # The PinCodeCredential state of this device.
  state: PinCodeCredentialState!
}

# Information about the reported Power state for the isOn field.
type PowerStateReportedIsOn implements ReportedStateField {
  # The DateTime that this reported state value was persisted to the platform.
  createdAt: DateTime!

  # The DateTime that this reported state value was sampled (recorded) by the device
  sampledAt: DateTime!

  # Whether a device's power state is on or off.
  value: Boolean!
}

# Information about the desired Power state for the isOn field.
type PowerStateDesiredIsOn implements DesiredStateField {
  # The datetime that this desired state value was most recently updated.
  updatedAt: DateTime!

  # Whether a device's power state is on or off.
  value: Boolean!

  # Whether a device's power state is on or off.
  delta: Boolean
}

# Information about the Power state for the isOn field
type PowerStateIsOnField {
  # The most recently reported state. May be null if the device has not yet reported it's state
  reported: PowerStateReportedIsOn

  # The device's desired state. May be null if the device has not yet reported it's state.
  desired: PowerStateDesiredIsOn
}

# The state information for the Power trait
type PowerState {
  # Whether a device's power state is on or off.
  isOn: PowerStateIsOnField!
}

# The properties (trait configuration) payload for the Power trait
type PowerProperties {
  # Indicates if the device actually has distinct On and Off features as opposed to a single power button.
  supportsDiscreteOnOff: Boolean
}

type PowerDeviceTrait implements DeviceTrait {
  # The name of this device trait.
  name: TraitName!

  # Devices can have multiple "instances" of a given trait. This property is used to differentiate those separate instances
  instance: String!

  # Whether this trait is in beta.
  isBeta: Boolean

  # The trait filtered events of this device.
  events(
    # Limit the paged response to a max number of items.
    first: Int = 10

    # Used to indicated where in the result set the paged response should start.
    after: String
    filter: TraitFilteredEventFilterInput
    sort: DeviceEventSortInput
  ): DeviceEventConnection!

  # The Power configuration for this device.
  properties: PowerProperties!

  # The Power state of this device.
  state: PowerState!
}

# Information about the reported ThermostatSetting state for the mode field.
type ThermostatSettingStateReportedMode implements ReportedStateField {
  # The DateTime that this reported state value was persisted to the platform.
  createdAt: DateTime!

  # The DateTime that this reported state value was sampled (recorded) by the device
  sampledAt: DateTime!

  # Current mode of the device, within the range of values as defined by availableThermostatModes.
  value: ThermostatMode!
}

# Information about the desired ThermostatSetting state for the mode field.
type ThermostatSettingStateDesiredMode implements DesiredStateField {
  # The datetime that this desired state value was most recently updated.
  updatedAt: DateTime!

  # Current mode of the device, within the range of values as defined by availableThermostatModes.
  value: ThermostatMode!

  # Current mode of the device, within the range of values as defined by availableThermostatModes.
  delta: ThermostatMode
}

# Information about the ThermostatSetting state for the mode field
type ThermostatSettingStateModeField {
  # The most recently reported state. May be null if the device has not yet reported it's state
  reported: ThermostatSettingStateReportedMode

  # The device's desired state. May be null if the device has not yet reported it's state.
  desired: ThermostatSettingStateDesiredMode
}

# Information about the reported ThermostatSetting state for the targetTemperature field.
type ThermostatSettingStateReportedTargetTemperature implements ReportedStateField {
  # The DateTime that this reported state value was persisted to the platform.
  createdAt: DateTime!

  # The DateTime that this reported state value was sampled (recorded) by the device
  sampledAt: DateTime!

  # Single temperature set point the device is currently programmed at.
  value: Float!
}

# Information about the desired ThermostatSetting state for the targetTemperature field.
type ThermostatSettingStateDesiredTargetTemperature implements DesiredStateField {
  # The datetime that this desired state value was most recently updated.
  updatedAt: DateTime!

  # Single temperature set point the device is currently programmed at.
  value: Float!

  # Single temperature set point the device is currently programmed at.
  delta: Float
}

# Information about the ThermostatSetting state for the targetTemperature field
type ThermostatSettingStateTargetTemperatureField {
  # The most recently reported state. May be null if the device has not yet reported it's state
  reported: ThermostatSettingStateReportedTargetTemperature

  # The device's desired state. May be null if the device has not yet reported it's state.
  desired: ThermostatSettingStateDesiredTargetTemperature
}

# Information about the reported ThermostatSetting state for the ambientTemperature field.
type ThermostatSettingStateReportedAmbientTemperature implements ReportedStateField {
  # The DateTime that this reported state value was persisted to the platform.
  createdAt: DateTime!

  # The DateTime that this reported state value was sampled (recorded) by the device
  sampledAt: DateTime!

  # Current observed temperature in temperatureUnit.
  value: Float!
}

# Information about the desired ThermostatSetting state for the ambientTemperature field.
type ThermostatSettingStateDesiredAmbientTemperature implements DesiredStateField {
  # The datetime that this desired state value was most recently updated.
  updatedAt: DateTime!

  # Current observed temperature in temperatureUnit.
  value: Float!

  # Current observed temperature in temperatureUnit.
  delta: Float
}

# Information about the ThermostatSetting state for the ambientTemperature field
type ThermostatSettingStateAmbientTemperatureField {
  # The most recently reported state. May be null if the device has not yet reported it's state
  reported: ThermostatSettingStateReportedAmbientTemperature

  # The device's desired state. May be null if the device has not yet reported it's state.
  desired: ThermostatSettingStateDesiredAmbientTemperature
}

# Information about the reported ThermostatSetting state for the setPointHigh field.
type ThermostatSettingStateReportedSetPointHigh implements ReportedStateField {
  # The DateTime that this reported state value was persisted to the platform.
  createdAt: DateTime!

  # The DateTime that this reported state value was sampled (recorded) by the device
  sampledAt: DateTime!

  # Higher end of the range for auto mode.
  value: Float!
}

# Information about the desired ThermostatSetting state for the setPointHigh field.
type ThermostatSettingStateDesiredSetPointHigh implements DesiredStateField {
  # The datetime that this desired state value was most recently updated.
  updatedAt: DateTime!

  # Higher end of the range for auto mode.
  value: Float!

  # Higher end of the range for auto mode.
  delta: Float
}

# Information about the ThermostatSetting state for the setPointHigh field
type ThermostatSettingStateSetPointHighField {
  # The most recently reported state. May be null if the device has not yet reported it's state
  reported: ThermostatSettingStateReportedSetPointHigh

  # The device's desired state. May be null if the device has not yet reported it's state.
  desired: ThermostatSettingStateDesiredSetPointHigh
}

# Information about the reported ThermostatSetting state for the setPointLow field.
type ThermostatSettingStateReportedSetPointLow implements ReportedStateField {
  # The DateTime that this reported state value was persisted to the platform.
  createdAt: DateTime!

  # The DateTime that this reported state value was sampled (recorded) by the device
  sampledAt: DateTime!

  # Lower end of the range for auto mode.
  value: Float!
}

# Information about the desired ThermostatSetting state for the setPointLow field.
type ThermostatSettingStateDesiredSetPointLow implements DesiredStateField {
  # The datetime that this desired state value was most recently updated.
  updatedAt: DateTime!

  # Lower end of the range for auto mode.
  value: Float!

  # Lower end of the range for auto mode.
  delta: Float
}

# Information about the ThermostatSetting state for the setPointLow field
type ThermostatSettingStateSetPointLowField {
  # The most recently reported state. May be null if the device has not yet reported it's state
  reported: ThermostatSettingStateReportedSetPointLow

  # The device's desired state. May be null if the device has not yet reported it's state.
  desired: ThermostatSettingStateDesiredSetPointLow
}

# Information about the reported ThermostatSetting state for the ambientHumidity field.
type ThermostatSettingStateReportedAmbientHumidity implements ReportedStateField {
  # The DateTime that this reported state value was persisted to the platform.
  createdAt: DateTime!

  # The DateTime that this reported state value was sampled (recorded) by the device
  sampledAt: DateTime!

  # Observed humidity.
  value: Float!
}

# Information about the desired ThermostatSetting state for the ambientHumidity field.
type ThermostatSettingStateDesiredAmbientHumidity implements DesiredStateField {
  # The datetime that this desired state value was most recently updated.
  updatedAt: DateTime!

  # Observed humidity.
  value: Float!

  # Observed humidity.
  delta: Float
}

# Information about the ThermostatSetting state for the ambientHumidity field
type ThermostatSettingStateAmbientHumidityField {
  # The most recently reported state. May be null if the device has not yet reported it's state
  reported: ThermostatSettingStateReportedAmbientHumidity

  # The device's desired state. May be null if the device has not yet reported it's state.
  desired: ThermostatSettingStateDesiredAmbientHumidity
}

# Information about the reported ThermostatSetting state for the targetHumidity field.
type ThermostatSettingStateReportedTargetHumidity implements ReportedStateField {
  # The DateTime that this reported state value was persisted to the platform.
  createdAt: DateTime!

  # The DateTime that this reported state value was sampled (recorded) by the device
  sampledAt: DateTime!

  # Single humidity set point the device is currently programmed at.
  value: Float!
}

# Information about the desired ThermostatSetting state for the targetHumidity field.
type ThermostatSettingStateDesiredTargetHumidity implements DesiredStateField {
  # The datetime that this desired state value was most recently updated.
  updatedAt: DateTime!

  # Single humidity set point the device is currently programmed at.
  value: Float!

  # Single humidity set point the device is currently programmed at.
  delta: Float
}

# Information about the ThermostatSetting state for the targetHumidity field
type ThermostatSettingStateTargetHumidityField {
  # The most recently reported state. May be null if the device has not yet reported it's state
  reported: ThermostatSettingStateReportedTargetHumidity

  # The device's desired state. May be null if the device has not yet reported it's state.
  desired: ThermostatSettingStateDesiredTargetHumidity
}

# Information about the reported ThermostatSetting state for the fanMode field.
type ThermostatSettingStateReportedFanMode implements ReportedStateField {
  # The DateTime that this reported state value was persisted to the platform.
  createdAt: DateTime!

  # The DateTime that this reported state value was sampled (recorded) by the device
  sampledAt: DateTime!

  # Current Fan mode of the device, within the range of values as defined by availableFanModes.
  value: FanMode!
}

# Information about the desired ThermostatSetting state for the fanMode field.
type ThermostatSettingStateDesiredFanMode implements DesiredStateField {
  # The datetime that this desired state value was most recently updated.
  updatedAt: DateTime!

  # Current Fan mode of the device, within the range of values as defined by availableFanModes.
  value: FanMode!

  # Current Fan mode of the device, within the range of values as defined by availableFanModes.
  delta: FanMode
}

# Information about the ThermostatSetting state for the fanMode field
type ThermostatSettingStateFanModeField {
  # The most recently reported state. May be null if the device has not yet reported it's state
  reported: ThermostatSettingStateReportedFanMode

  # The device's desired state. May be null if the device has not yet reported it's state.
  desired: ThermostatSettingStateDesiredFanMode
}

# The state information for the ThermostatSetting trait
type ThermostatSettingState {
  # Current mode of the device, within the range of values as defined by availableThermostatModes.
  mode: ThermostatSettingStateModeField!

  # Single temperature set point the device is currently programmed at.
  targetTemperature: ThermostatSettingStateTargetTemperatureField!

  # Current observed temperature in temperatureUnit.
  ambientTemperature: ThermostatSettingStateAmbientTemperatureField!

  # Higher end of the range for auto mode.
  setPointHigh: ThermostatSettingStateSetPointHighField!

  # Lower end of the range for auto mode.
  setPointLow: ThermostatSettingStateSetPointLowField!

  # Observed humidity.
  ambientHumidity: ThermostatSettingStateAmbientHumidityField!

  # Single humidity set point the device is currently programmed at.
  targetHumidity: ThermostatSettingStateTargetHumidityField!

  # Current Fan mode of the device, within the range of values as defined by availableFanModes.
  fanMode: ThermostatSettingStateFanModeField!
}

# The properties (trait configuration) payload for the ThermostatSetting trait
type ThermostatSettingProperties {
  # Supported modes by the device.
  availableThermostatModes: [ThermostatMode!]

  # Supported fan modes by the device.
  availableFanModes: [FanMode!]

  # The allowable range to set the device to in Celsius when heating.
  heatSetPointRange: DynamicFloatRange

  # The allowable range to set the device to in Celsius when cooling.
  coolSetPointRange: DynamicFloatRange

  # The allowed thermostat mode(s) for the setTargetTemperature action.
  allowedTargetTemperatureModes: [ThermostatMode!]

  # The allowed thermostat mode(s) for the setTargetTemperatureRange action.
  allowedTargetTemperatureRangeModes: [ThermostatMode!]
}

type ThermostatSettingDeviceTrait implements DeviceTrait {
  # The name of this device trait.
  name: TraitName!

  # Devices can have multiple "instances" of a given trait. This property is used to differentiate those separate instances
  instance: String!

  # Whether this trait is in beta.
  isBeta: Boolean

  # The trait filtered events of this device.
  events(
    # Limit the paged response to a max number of items.
    first: Int = 10

    # Used to indicated where in the result set the paged response should start.
    after: String
    filter: TraitFilteredEventFilterInput
    sort: DeviceEventSortInput
  ): DeviceEventConnection!

  # The ThermostatSetting configuration for this device.
  properties: ThermostatSettingProperties!

  # The ThermostatSetting state of this device.
  state: ThermostatSettingState!
}
