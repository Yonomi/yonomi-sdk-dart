version: 2.1

#####################
# Common Definitions
#####################

# Orb declarations
orbs:
  codecov: codecov/codecov@1.0.2

executors:
  default-executor:
    docker:
      - image: cirrusci/flutter
    shell: "/bin/bash -eo pipefail"

anchors: 
  - &main_only
    filters:
      branches:
        only: main
  - &release-tag-filter
    filters:
      tags:
        only: /^v.*/
      branches:
        ignore: /.*/
  - &feature-branch-filter
    filters:
      branches:
        only: /^(?!main$).*/

commands:
  unit-tests:
    description: "Run local unit tests"
    steps:
      - run:
          name: command to run unit tests
          command: pub run test test/unit --reporter json | tojunit --output test-results/dart-tests/dart_sdk_unit_tests-report.xml
  e2e-tests:
    description: "Run end-to-end tests"
    steps:
      - run:
          name: command to run e2e tests
          command: pub run test test/e2e --reporter json | tojunit --output test-results/dart-tests/dart_sdk_e2e_tests-report.xml
  run-tests:
    description: "Run all tests"
    steps:
      - run: echo $REPO_TYPE
      - run:
          name: command to run all tests
          command: PRIVATE_KEY=$(echo "$PRIVATE_KEY_ENCODED" | base64 --decode) flutter test --coverage && lcov --remove coverage/lcov.info 'lib/third_party/*' 'lib/src/queries/*' -o coverage/new_lcov.info
      - codecov/upload:
          file: coverage/new_lcov.info
  setup-github:
    description: "Git Setup"
    steps:
      - run:
          name: Git Setup
          command: |
            mkdir ~/.ssh/ && echo -e "Host github.com\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
            git config --global user.email "developer@yonomi.co"
            git config --global user.name "CircleCI"
  run-semantic-versioning:
    description: "Tag and create changelog"
    steps:
      - setup-github
      - run: sudo apt-get update
      - run: sudo apt-get -y install npm
      - run: |
          npm init -y
          npm i -D @semantic-release/changelog
          npm i -D @semantic-release/git
          npm i -D semantic-release-dart
          npx semantic-release --branches main
  run-publish:
    description: "Publishes to pub.dev"
    steps:
      - run:
          name: Publishing to pub.dev
          command: dart pub publish

  dependencies:
    description: "Download dependencies and setup global packages"
    parameters:
      pub-cache:
        type: string
        default: "~/.pub-cache"
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1.4-dependencies-{{ arch }}-{{ checksum "pubspec.lock" }}
            - v1.4-dependencies-{{ arch }}-
      - run:
          name: Download deps
          command: pub get
      - run:
          name: Get junitreporter
          command: pub global activate junitreport
      - save_cache:
          key: v1.4-dependencies-{{ arch }}-{{ checksum "pubspec.lock" }}
          paths:
            - .dart_tool
            - << parameters.pub-cache >>
  generate-dartdoc:
    description: "Prepare and generate dartdocs"
    steps:
      - run:
          name: Prepare Dartdoc
          command: |
            flutter pub global activate dartdoc
            flutter pub global run dartdoc:dartdoc --format md

##################
# Job Definitions
##################
jobs:
  test:
    executor: default-executor
    steps:
      - dependencies
      - run:
          name: Make folder for test results
          command: mkdir -p test-results/dart-tests
      - run-tests
      - store_test_results:
          path: test-results
  semantic-versioning:
    executor: default-executor
    steps:
      - dependencies
      - run-semantic-versioning
  publish:
    executor: default-executor
    steps:
      - dependencies
      - run-publish
  generate_documentation:
    executor: default-executor
    steps:
      - dependencies
      - generate-dartdoc
      - setup-github
      - run:
          name: Generate and push new docs if they exist
          command: |
            if [[ `git status doc/ --porcelain` ]];
            then
              echo "New documents detected. Checking in new docs."
              git add doc/
              git commit -m "docs: updated dartdocs"
              REMOTE_URL="$( echo << pipeline.project.git_url >> | sed -e 's#^https://##; s#/score/$##' )"
              git remote set-url origin "https://$REMOTE_URL.git"
              git push -u origin HEAD
            else
              echo "Nothing to check in. No new docs generated"
            fi

######################
# Workflow Definition
######################
workflows:
  version: 2.1
  feature:
    jobs:
      - test:
          <<: *feature-branch-filter
      - generate_documentation:
          context:
            - org-global
          requires:
            - test
  main:
    jobs:
      - test:
          <<: *main_only  
      - semantic-versioning:
          context:
            - org-global
          requires:
              - test
  production:
    when:
      and:
        - equal: [ https://github.com/Yonomi/yonomi-sdk-dart, << pipeline.project.git_url >> ]
    jobs:
      - test:
          <<: *release-tag-filter
      - hold:
          type: approval
          requires:
            - test
          <<: *release-tag-filter
      - publish:
          requires:
            - hold
          <<: *release-tag-filter
